<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Jervis的个人博客</title>
  
  <subtitle>一万年太久，只争朝夕。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://jervis2049.gitee.io/"/>
  <updated>2021-06-03T08:16:27.402Z</updated>
  <id>https://jervis2049.gitee.io/</id>
  
  <author>
    <name>Jervis</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【数据结构学习】单链表在JavaScript中的实现</title>
    <link href="https://jervis2049.gitee.io/2021/05/07/javascript-linkedlist/"/>
    <id>https://jervis2049.gitee.io/2021/05/07/javascript-linkedlist/</id>
    <published>2021-05-07T10:42:58.000Z</published>
    <updated>2021-06-03T08:16:27.402Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是链表"><a href="#什么是链表" class="headerlink" title="什么是链表"></a>什么是链表</h3><p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。</p><h3 id="链表和数组特点的比较"><a href="#链表和数组特点的比较" class="headerlink" title="链表和数组特点的比较"></a>链表和数组特点的比较</h3><p>数组：</p><ul><li>数组静态分配内存，大小固定</li><li>在数组中添加或移除项的成本较高，因为数组的内存地址是连续的，需要移动元素。时间复杂度O(n)</li><li>通过下标可随机访问元素，数据查找效率较高（内存连续）。时间复杂度O(1)</li></ul><p>链表：</p><ul><li>链表动态分配内存，扩展性好</li><li>在链表中添加或移除元素效率较高，不需要移动其它元素。时间复杂度O(1)。</li><li>查找效率较慢，访问一个元素，需从起点迭代直到找到所需的元素。时间复杂度O(n)</li></ul><a id="more"></a><p>在JavaScript中，链表的结构如下，每个元素包含2个属性，其中val为链表元素的值，next则是指向链表中下一个元素的指针。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> list = &#123;</span><br><span class="line">    head: &#123;</span><br><span class="line">        val: <span class="number">6</span></span><br><span class="line">        next: &#123;</span><br><span class="line">            val: <span class="number">10</span>                                             </span><br><span class="line">            next: &#123;</span><br><span class="line">                val: <span class="number">12</span></span><br><span class="line">                next: &#123;</span><br><span class="line">                    val: <span class="number">3</span></span><br><span class="line">                    next: <span class="literal">null</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><img src="/img/articleimg/linkedlist.png" alt="image"></p><p>实现链表的几个主要方法：</p><ul><li><code>push(val)</code>:向链表尾部添加一个新元素</li><li><code>insert(val,position)</code>:向链表特定位置插入一个新元素。</li><li><code>getElementAt(position)</code>:返回链表中特定位置的元素。</li><li><code>remove(val)</code>:从链表中移除一个元素。</li><li><code>indexOf(val)</code>:返回元素在链表中的索引。</li><li><code>removeAt(position)</code>:从链表的特定位置移除一个元素。</li><li><code>replaceAt(val,position)</code>:替换链表中特定位置的元素。</li><li><code>reverse()</code>:反转链表。</li><li><code>clear()</code>:清空链表。</li><li><code>size()</code>:返回链表长度。</li><li><code>toString()</code>:返回整个链表的字符串。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(val) &#123;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line">        <span class="keyword">this</span>.head = <span class="literal">null</span>;<span class="comment">//头结点</span></span><br><span class="line">        <span class="keyword">this</span>.count = <span class="number">0</span>;<span class="comment">//链表长度</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>val 插入末端的值</span></span><br><span class="line"><span class="comment">     * 第一种情况，head为空，直接将元素赋值给head</span></span><br><span class="line"><span class="comment">     * 第二种情况，循环遍历取到最后一个元素，将新增的元素接上即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    push(val) &#123;</span><br><span class="line">        <span class="keyword">const</span> node = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.head = node;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">while</span> (current.next != <span class="literal">null</span>) &#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            current.next = node;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>index 元素的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>该位置的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    getElementAt(index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; index &amp;&amp; current.next != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">                current = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> current</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>删除index位置上的元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>index 元素的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return </span>该位置的元素的val</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    removeAt(index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">this</span>.head = current.next;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>);</span><br><span class="line">                current = previous.next;</span><br><span class="line">                previous.next = current.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.count--;</span><br><span class="line">            <span class="keyword">return</span> current.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">undefined</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>删除值为val的元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    remove(val)&#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="keyword">this</span>.indexOf(val);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.removeAt(index)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>在index位置插入元素</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>val 插入到index位置的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>index 元素的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return <span class="type">&#123;Boolean&#125;</span> </span>表示成功或失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    insertAt(val, index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">const</span> node = <span class="keyword">new</span> ListNode(val);</span><br><span class="line">            <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">if</span> (index == <span class="number">0</span>) &#123;</span><br><span class="line">                node.next = current;</span><br><span class="line">                <span class="keyword">this</span>.head = node;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> previous = <span class="keyword">this</span>.getElementAt(index - <span class="number">1</span>);</span><br><span class="line">                current = previous.next;</span><br><span class="line">                node.next = current;</span><br><span class="line">                previous.next = node;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">this</span>.count++;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>替换index位置元素的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>val 新的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>index 元素的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return <span class="type">&#123;Boolean&#125;</span> </span>表示成功或失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    replaceAt(val, index) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="keyword">this</span>.count) &#123;</span><br><span class="line">            <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">            <span class="keyword">if</span> (index &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                current = <span class="keyword">this</span>.getElementAt(index);</span><br><span class="line">            &#125;</span><br><span class="line">            current.val = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>查找元素的位置</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param </span>val 元素的值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return <span class="type">&#123;Number&#125;</span> <span class="variable">index</span></span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    indexOf(val) &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.count &amp;&amp; current != <span class="literal">null</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(current.val === val)&#123;</span><br><span class="line">                <span class="keyword">return</span> i</span><br><span class="line">            &#125;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>链表反转</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    reverse() &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">let</span> previous = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">let</span> next = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (current != <span class="literal">null</span>) &#123;</span><br><span class="line">            next = current.next;</span><br><span class="line">            current.next = previous;</span><br><span class="line">            previous = current;</span><br><span class="line">            current = next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.head = previous;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.head</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description </span>把链表对象转化成字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return <span class="type">&#123;String&#125;</span> </span>返回链表内容的字符串 e.g 1,2,3,4</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="keyword">let</span> current = <span class="keyword">this</span>.head;</span><br><span class="line">        <span class="keyword">if</span> (current == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">let</span> objString = current.val;</span><br><span class="line">        <span class="keyword">while</span> (current.next != <span class="literal">null</span>) &#123;</span><br><span class="line">            objString = <span class="string">`<span class="subst">$&#123;objString&#125;</span>,<span class="subst">$&#123;current.next.val&#125;</span>`</span>;</span><br><span class="line">            current = current.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> objString</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return <span class="type">&#123;Number&#125;</span> </span>链表长度</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    size() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.count</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> list = <span class="keyword">new</span> LinkedList()</span><br><span class="line"></span><br><span class="line">list.push(<span class="number">1</span>)</span><br><span class="line">list.push(<span class="number">3</span>)</span><br><span class="line">list.push(<span class="number">5</span>)</span><br><span class="line">list.push(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">list.insertAt(<span class="number">9</span>, <span class="number">0</span>) </span><br><span class="line">list.remove(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'list.indexOf(3) =&gt; '</span>, list.indexOf(<span class="number">3</span>)); <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'list.toString() =&gt; '</span>, list.toString()); <span class="comment">//"9,1,3,5"</span></span><br><span class="line"></span><br><span class="line">list.reverse() <span class="comment">//5-&gt;3-&gt;1-&gt;9</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(list)</span><br></pre></td></tr></table></figure><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p>1、How to Implement a Linked List in JavaScript<br><a href="https://www.freecodecamp.org/news/implementing-a-linked-list-in-javascript/" target="_blank" rel="noopener">https://www.freecodecamp.org/news/implementing-a-linked-list-in-javascript/</a><br>2、Linked Lists for JavaScript Developers<br><a href="https://daveceddia.com/linked-lists-javascript/" target="_blank" rel="noopener">https://daveceddia.com/linked-lists-javascript/</a><br>3、Implementation of LinkedList in Javascript<br><a href="https://www.geeksforgeeks.org/implementation-linkedlist-javascript/" target="_blank" rel="noopener">https://www.geeksforgeeks.org/implementation-linkedlist-javascript/</a><br>4、《学习JavaScript数据结构与算法》</p><h3 id="算法题目"><a href="#算法题目" class="headerlink" title="算法题目"></a>算法题目</h3><h4 id="寻找链表的中间结点"><a href="#寻找链表的中间结点" class="headerlink" title="寻找链表的中间结点"></a>寻找链表的中间结点</h4><blockquote><p>给定一个头结点为 head 的非空单链表，返回链表的中间结点。如果有两个中间结点，则返回第二个中间结点。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">head</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> middleNode = <span class="function"><span class="keyword">function</span>(<span class="params">head</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head == <span class="literal">null</span> || head.next == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> head</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> slow = head;</span><br><span class="line">    <span class="keyword">let</span> fast = head;</span><br><span class="line">    <span class="keyword">while</span> (fast != <span class="literal">null</span> &amp;&amp; fast.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        slow = slow.next;</span><br><span class="line">        fast = fast.next.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> slow</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><p>思路：快慢指针（双指针），快指针每次走2步，慢指针每次走1步，当快指针走到末尾的时候，慢指针刚好走到中间。</p><h4 id="删除链表的倒数第n个节点"><a href="#删除链表的倒数第n个节点" class="headerlink" title="删除链表的倒数第n个节点"></a>删除链表的倒数第n个节点</h4><blockquote><p>给你一个链表，删除链表的倒数第 n 个结点，并且返回链表的头结点。要求使用一趟扫描实现。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> removeNthFromEnd = <span class="function"><span class="keyword">function</span>(<span class="params">head, n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> preNode = head;</span><br><span class="line">    <span class="keyword">let</span> curNode = head;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        curNode = curNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (curNode == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> preNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (curNode.next != <span class="literal">null</span>) &#123;</span><br><span class="line">        preNode = preNode.next;</span><br><span class="line">        curNode = curNode.next;</span><br><span class="line">    &#125;</span><br><span class="line">    preNode.next = preNode.next.next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><p>思路：双指针，和上题思路差不多。<code>curNode</code>指针先走n步，再和<code>preNode</code>一起走，当<code>curNode</code>走到最后的时候，<code>preNode</code>所在的位置为要删除节点的前驱。此种写法虽然是有2个循环，但实际上合起来也只是遍历链表一次而已。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是链表&quot;&gt;&lt;a href=&quot;#什么是链表&quot; class=&quot;headerlink&quot; title=&quot;什么是链表&quot;&gt;&lt;/a&gt;什么是链表&lt;/h3&gt;&lt;p&gt;链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。&lt;/p&gt;
&lt;h3 id=&quot;链表和数组特点的比较&quot;&gt;&lt;a href=&quot;#链表和数组特点的比较&quot; class=&quot;headerlink&quot; title=&quot;链表和数组特点的比较&quot;&gt;&lt;/a&gt;链表和数组特点的比较&lt;/h3&gt;&lt;p&gt;数组：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数组静态分配内存，大小固定&lt;/li&gt;
&lt;li&gt;在数组中添加或移除项的成本较高，因为数组的内存地址是连续的，需要移动元素。时间复杂度O(n)&lt;/li&gt;
&lt;li&gt;通过下标可随机访问元素，数据查找效率较高（内存连续）。时间复杂度O(1)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;链表：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;链表动态分配内存，扩展性好&lt;/li&gt;
&lt;li&gt;在链表中添加或移除元素效率较高，不需要移动其它元素。时间复杂度O(1)。&lt;/li&gt;
&lt;li&gt;查找效率较慢，访问一个元素，需从起点迭代直到找到所需的元素。时间复杂度O(n)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="数据结构" scheme="https://jervis2049.gitee.io/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【翻译】如何用JavaScript触发文件下载</title>
    <link href="https://jervis2049.gitee.io/2021/03/29/how-trigger-file-downloads-with-javascript/"/>
    <id>https://jervis2049.gitee.io/2021/03/29/how-trigger-file-downloads-with-javascript/</id>
    <published>2021-03-29T10:42:58.000Z</published>
    <updated>2021-03-31T00:57:58.498Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>看到不错的文章，尝试着翻译出来，并且在需要的地方加上自己的理解。</p></blockquote><p>原文地址：<a href="https://pqina.nl/blog/how-to-prompt-the-user-to-download-a-file-instead-of-navigating-to-it/" target="_blank" rel="noopener">https://pqina.nl/blog/how-to-prompt-the-user-to-download-a-file-instead-of-navigating-to-it/</a></p><p>原文标题：<code>How to prompt the user to download a file instead of navigating to it</code>，翻译过来是：如何提示用户下载文件，而不是导航到文件。读起来怪怪的，按我理解本文是这个意思：<code>如何用JavaScript触发文件下载</code>。</p><p>以下是正文</p><p>有时候我们只是想下载一张图片而不是在浏览器上打开它。对于这种情况，我们可以使用<code>download</code>属性。在这篇文章，<br>我们将会学习怎么使用它，以及如何使用JavaScript来自动触发它的行为。</p><p><code>download</code>属性告诉浏览器，当该元素被点击的时候，下载链接目标。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"/media/cat.jpeg"</span> download&gt;cat.jpeg&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure></p><a id="more"></a><p>我们也可以通过设置<code>download</code>属性的value来提供文件的名称，在这个例子，我们设置它为<code>&#39;my-cat.jpeg&#39;</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=<span class="string">"/media/cat.jpeg"</span> download=<span class="string">"my-cat.jpeg"</span>&gt;cat.jpeg&lt;<span class="regexp">/a&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="自动下载"><a href="#自动下载" class="headerlink" title="自动下载"></a>自动下载</h3><p>假如我们在浏览器生成了一个文件，我们如何将这个文件提供给用户，而不需要要求用户点击一个链接。</p><p>JavaScript助您一臂之力！</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">downloadFile</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//使用`creatObjectURL`创建一个链接并设置URL</span></span><br><span class="line">  <span class="keyword">const</span> link = <span class="built_in">document</span>.createElement(<span class="string">"a"</span>);</span><br><span class="line">  link.style.display = <span class="string">"none"</span>;</span><br><span class="line">  link.href = URL.createObjectURL(file);</span><br><span class="line">  link.download = file.name;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//它需要被添加到DOM中，这样就才能被点击。</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(link);</span><br><span class="line">  link.click();</span><br><span class="line"></span><br><span class="line">  <span class="comment">//要想在火狐浏览器上运行，我们需要等一下再删除它。</span></span><br><span class="line">  <span class="comment">//URL.createObjectURL被创建之后，使用完需要手动释放。</span></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    URL.revokeObjectURL(link.href);</span><br><span class="line">    link.parentNode.removeChild(link);</span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以这样使用：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态创建一个文件</span></span><br><span class="line"><span class="keyword">const</span> myFile = <span class="keyword">new</span> File([<span class="string">`<span class="subst">$&#123;<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>: Meow!`</span>], <span class="string">"my-cat.txt"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用我们的函数下载</span></span><br><span class="line">downloadFile(myFile);</span><br></pre></td></tr></table></figure></p><h3 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h3><p><code>URL.createObjectURL()</code>介绍：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL</a><br><code>File.File()</code>介绍：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File/File" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/API/File/File</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;看到不错的文章，尝试着翻译出来，并且在需要的地方加上自己的理解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;原文地址：&lt;a href=&quot;https://pqina.nl/blog/how-to-prompt-the-user-to-download-a-file-instead-of-navigating-to-it/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://pqina.nl/blog/how-to-prompt-the-user-to-download-a-file-instead-of-navigating-to-it/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;原文标题：&lt;code&gt;How to prompt the user to download a file instead of navigating to it&lt;/code&gt;，翻译过来是：如何提示用户下载文件，而不是导航到文件。读起来怪怪的，按我理解本文是这个意思：&lt;code&gt;如何用JavaScript触发文件下载&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;以下是正文&lt;/p&gt;
&lt;p&gt;有时候我们只是想下载一张图片而不是在浏览器上打开它。对于这种情况，我们可以使用&lt;code&gt;download&lt;/code&gt;属性。在这篇文章，&lt;br&gt;我们将会学习怎么使用它，以及如何使用JavaScript来自动触发它的行为。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;download&lt;/code&gt;属性告诉浏览器，当该元素被点击的时候，下载链接目标。&lt;br&gt;&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;a href=&lt;span class=&quot;string&quot;&gt;&quot;/media/cat.jpeg&quot;&lt;/span&gt; download&amp;gt;cat.jpeg&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/a&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="译文" scheme="https://jervis2049.gitee.io/tags/%E8%AF%91%E6%96%87/"/>
    
  </entry>
  
  <entry>
    <title>我的工具箱（工欲善其事，必先利其器）</title>
    <link href="https://jervis2049.gitee.io/2021/03/22/my-tools/"/>
    <id>https://jervis2049.gitee.io/2021/03/22/my-tools/</id>
    <published>2021-03-22T10:42:58.000Z</published>
    <updated>2021-04-17T14:57:39.940Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>记录工作或生活上比较有用的工具。</p></blockquote><ul><li><a href="http://www.hostbuf.com/t/988.html" target="_blank" rel="noopener">FinalShell</a> - 一款终端利器，全平台支持，不仅兼具<code>XShell</code>和<code>FlashFXP</code>的功能，还集成了很多便利的特性。而且还是免费的。</li><li><a href="http://www.faststonecapture.com" target="_blank" rel="noopener">FastStone Capture</a> - 一款经典好用的屏幕截图软件，还可以录屏（不过感到不太满意，可能姿势不对）。我用得最多的是它的取色功能，可以轻松拿到目标的十六进制颜色值。</li><li><a href="https://codesandbox.io/" target="_blank" rel="noopener">CodeSandbox</a> - 项目在线编辑器，类似的有<code>codepen</code>。</li><li><a href="https://draw.io" target="_blank" rel="noopener">draw.io</a> - 流程图软件，vscode上也有这个插件。</li><li><a href="https://www.photopea.com/" target="_blank" rel="noopener">photopea</a> - web版的Photoshop。</li><li><a href="https://trekhleb.dev/js-image-carver/" target="_blank" rel="noopener">JS IMAGE CARVER</a> - 一个采用接缝裁剪（seam carving）算法的在线工具，可以任意改变图片的高度和宽度，而不会扭曲图像。</li><li><a href="https://www.deepl.com/translator" target="_blank" rel="noopener">DeepL</a> - 一个强大的翻译工具。</li><li><a href="https://www.typora.io/" target="_blank" rel="noopener">Typora</a> - 一款好用的Markdown编辑器。<a id="more"></a></li><li><a href="https://www.voidtools.com/zh-cn/" target="_blank" rel="noopener">Everthing</a> - 一款Windows下的文件、文件夹名称快速搜索软件。有时候会忘记文件存哪了，用这个可以快速找到。</li><li><a href="https://imgtu.com/" target="_blank" rel="noopener">imgtu</a> - 免费图床。</li><li><a href="https://www.z4a.net/" target="_blank" rel="noopener">z4a</a> - 免费图床。</li><li><a href="https://tinypng.com/" target="_blank" rel="noopener">tinypng</a> - 在线压缩png/jpg图片。</li><li><a href="http://upng.photopea.com/" target="_blank" rel="noopener">upng</a> - 在线压缩png图片。官方对比tinypng，同样条件下，经过upng压缩后的png体积更小。</li><li><a href="https://squoosh.app/" target="_blank" rel="noopener">squoosh</a> - 在线压缩图片，谷歌团队出品。支持图片转webp格式。</li><li><a href="https://www.iconfont.cn/" target="_blank" rel="noopener">iconfont</a> - 阿里的一个图标库。</li><li><a href="https://tool.oschina.net/codeformat/html" target="_blank" rel="noopener">codeformat</a> - 在线格式化代码。</li><li><a href="https://hellosean1025.github.io/yapi/index.html" target="_blank" rel="noopener">YApi</a> - 接口管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 API。</li><li><a href="https://hellosean1025.github.io/yapi/index.html" target="_blank" rel="noopener">Postman</a> - 调试接口的工具，类似的有<code>apizza</code>。</li><li><a href="https://www.telerik.com/fiddler" target="_blank" rel="noopener">Fiddler</a> - 代理工具，类似的还有<code>Charles</code>。</li><li><a href="http://dev.to/" target="_blank" rel="noopener">dev.to</a> - 国外知名开发者社区，多逛逛，顺便提高英语水平^_^。</li><li><a href="https://stackoverflow.com/" target="_blank" rel="noopener">Stack Overflow</a> - 国外IT技术问答网站，Google搜索问题经常会出现它。</li><li><a href="https://dzone.com/" target="_blank" rel="noopener">DZone</a> - 国外IT社区。</li><li>有道云笔记、印象笔记。支持markdown语法。</li><li><a href="https://developers.google.cn/speed/pagespeed/insights/" target="_blank" rel="noopener">PageSpeed Insights</a> - 网站性能测试。也可以打开chrome控制台，找到<code>Lighthouse</code>，生成性能测试报告。</li><li><a href="https://www.pexels.com" target="_blank" rel="noopener">Pexels</a> - 免费高质量照片的网站</li><li><a href="https://unsplash.com/" target="_blank" rel="noopener">Unsplash</a> - 免费高质量照片的网站</li><li><a href="https://colorhunt.co/" target="_blank" rel="noopener">Color Hunt</a> - 提供了很多配色方案</li><li><a href="http://responsivetesttool.com/" target="_blank" rel="noopener">responsivetesttool</a> - 测试网页在不同的分辨率的显示情况。曾经的QA同事推荐的。</li><li><a href="https://pptr.dev/" target="_blank" rel="noopener">Puppeteer</a> - 一个Node库，谷歌团队出品。可以理解为一个headless的chrome浏览器，你可以通过Puppeteer的提供的api直接控制Chrome模拟大部分用户操作来进行UI Test或者作为爬虫访问页面来收集数据。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">MDN</a> - Web 技术文档。</li><li><a href="https://caniuse.com/" target="_blank" rel="noopener">caniuse</a> - 兼容性查询。</li><li><a href="https://www.html5tricks.com/demo/css3-animate-css/index.html" target="_blank" rel="noopener">Animate</a> - 优秀的CSS3动画库。</li><li><a href="https://chenshenhai.github.io/koa2-note/" target="_blank" rel="noopener">koa2-note</a> - 大佬整理的koa2在线Gitbook文档。</li><li><a href="https://www.npmjs.com/package/rimraf" target="_blank" rel="noopener">rimraf</a> - 一个npm包，用于删除文件和文件夹。即使是目录层级很深的node_moudles也可以轻易删除。</li></ul><p>暂时想到这么多，先更到这，有需要再补充…</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;记录工作或生活上比较有用的工具。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.hostbuf.com/t/988.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FinalShell&lt;/a&gt; - 一款终端利器，全平台支持，不仅兼具&lt;code&gt;XShell&lt;/code&gt;和&lt;code&gt;FlashFXP&lt;/code&gt;的功能，还集成了很多便利的特性。而且还是免费的。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.faststonecapture.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;FastStone Capture&lt;/a&gt; - 一款经典好用的屏幕截图软件，还可以录屏（不过感到不太满意，可能姿势不对）。我用得最多的是它的取色功能，可以轻松拿到目标的十六进制颜色值。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://codesandbox.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CodeSandbox&lt;/a&gt; - 项目在线编辑器，类似的有&lt;code&gt;codepen&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://draw.io&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;draw.io&lt;/a&gt; - 流程图软件，vscode上也有这个插件。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.photopea.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;photopea&lt;/a&gt; - web版的Photoshop。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://trekhleb.dev/js-image-carver/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;JS IMAGE CARVER&lt;/a&gt; - 一个采用接缝裁剪（seam carving）算法的在线工具，可以任意改变图片的高度和宽度，而不会扭曲图像。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.deepl.com/translator&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;DeepL&lt;/a&gt; - 一个强大的翻译工具。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.typora.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Typora&lt;/a&gt; - 一款好用的Markdown编辑器。
    
    </summary>
    
    
      <category term="其它" scheme="https://jervis2049.gitee.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>koa2 + mongodb项目</title>
    <link href="https://jervis2049.gitee.io/2021/01/02/koa2-mongodb/"/>
    <id>https://jervis2049.gitee.io/2021/01/02/koa2-mongodb/</id>
    <published>2021-01-02T11:20:17.000Z</published>
    <updated>2021-03-23T03:20:12.981Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><ul><li>技术栈：koa2 + mongodb</li><li>功能点：获取客户端ip和所在地址；统计用户访问次数；以及收集浏览器相关信息。</li><li>目的：实现功能很少，主要是把项目基础架构搭建起来，方便后续扩展。</li><li>项目地址：<a href="https://github.com/Jervis2049/koa2-mongodb-demo" target="_blank" rel="noopener">https://github.com/Jervis2049/koa2-mongodb-demo</a></li></ul><p>目录结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├─app.js  //入口文件</span><br><span class="line">├─views   //ejs模板</span><br><span class="line">├─static  //静态资源</span><br><span class="line">├─services //操作数据库的方法</span><br><span class="line">├─routers //路由</span><br><span class="line">├─models  //定义接口字段</span><br><span class="line">├─db      //mongodb 配置</span><br><span class="line">├─package.json //依赖文件</span><br></pre></td></tr></table></figure></p><a id="more"></a><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><h4 id="根据ip获取地理位置信息"><a href="#根据ip获取地理位置信息" class="headerlink" title="根据ip获取地理位置信息"></a>根据ip获取地理位置信息</h4><p>本项目使用了高德地图的接口。先到<a href="https://lbs.amap.com/api/webservice/guide/create-project/get-key" target="_blank">这里</a>申请key。调用此接口便可获取到数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://restapi.amap.com/v3/ip?ip=$&#123;ip&#125;&amp;key=5e91b92a1d8714b64202548a8ec4cee0</span><br></pre></td></tr></table></figure></p><h4 id="获取真实客户端ip"><a href="#获取真实客户端ip" class="headerlink" title="获取真实客户端ip"></a>获取真实客户端ip</h4><p>在koa里通过<code>ctx.request.ip</code>便可获取到ip。如果部署了代理服务器的话，比如nginx。那么获取到的往往是nginx所在的ip。我们要做的是：</p><p>1、在nginx.conf的proxy_pass添加<code>proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</code></p><p>2、设置代理头字段信任<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文档：https://koajs.com/#response</span></span><br><span class="line"><span class="comment">//Request remote address. Supports X-Forwarded-For when app.proxy is true.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> Koa()</span><br><span class="line">app.proxy = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></p><h4 id="获取用户的ipv4地址"><a href="#获取用户的ipv4地址" class="headerlink" title="获取用户的ipv4地址"></a>获取用户的ipv4地址</h4><p>获取客户端真实ip默认是ipv6格式。如果不指定hostname(0.0.0.0)，服务器会接受ipV6的主机访问（如果可用），也就是说访问服务器的ip会是::ffff:开头的，如<code>::ffff:192.168.0.1</code>，否则就是ipv4格式。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//文档：https://nodejs.org/dist/latest-v4.x/docs/api/http.html</span></span><br><span class="line">app.listen(<span class="number">3000</span>, <span class="string">'0.0.0.0'</span> , () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'localhost:3000'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h3 id="使用pm2守护进程"><a href="#使用pm2守护进程" class="headerlink" title="使用pm2守护进程"></a>使用pm2守护进程</h3><h4 id="全局安装pm2"><a href="#全局安装pm2" class="headerlink" title="全局安装pm2"></a>全局安装pm2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pm2 -g</span><br></pre></td></tr></table></figure><h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start app.js --watch</span><br></pre></td></tr></table></figure><p>打开 <a href="http://localhost:3000/index" target="_blank" rel="noopener">http://localhost:3000/index</a> 即可访问。页面会请求/client/record接口。请求成功将收集到用户ip和一些浏览器信息。</p><h3 id="mongodb的几个常用简单命令"><a href="#mongodb的几个常用简单命令" class="headerlink" title="mongodb的几个常用简单命令"></a>mongodb的几个常用简单命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">//连接本机</span><br><span class="line">mongo</span><br><span class="line">//查询所有数据库</span><br><span class="line">show dbs</span><br><span class="line">//查询所有集合</span><br><span class="line">show collections 或者 show tables</span><br><span class="line">//查询表内所有数据</span><br><span class="line">db.&lt;tableName&gt;.find();</span><br><span class="line">//删除table内所有数据</span><br><span class="line">db.&lt;tableName&gt;.remove(&#123;&#125;);</span><br><span class="line">//条件查询 (查询ip为123.222.64.88的数据)</span><br><span class="line">db.&lt;tableName&gt;.find(&#123;&quot;ip&quot;:&quot;123.222.64.88&quot;&#125;);</span><br><span class="line">//查询前5条</span><br><span class="line">db.&lt;tableName&gt;.find().limit(5);</span><br><span class="line">//模糊查询 (age&gt;22的数据)</span><br><span class="line">db.&lt;tableName&gt;.find(&#123;&quot;age&quot;:&#123;$gt:22&#125;) </span><br><span class="line">//删除table</span><br><span class="line">db.&lt;tableName&gt;.drop();</span><br><span class="line">//删除当前数据库</span><br><span class="line">db.dropDatabase()</span><br><span class="line">//collection删除</span><br><span class="line">db.collection.drop()</span><br></pre></td></tr></table></figure><p>参考文章：</p><ul><li><a href="https://www.jianshu.com/p/bcab08f2f924" target="_blank" rel="noopener">https://www.jianshu.com/p/bcab08f2f924</a></li><li><a href="https://ifttl.com/get-client-ip-in-koa/" target="_blank" rel="noopener">https://ifttl.com/get-client-ip-in-koa/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;技术栈：koa2 + mongodb&lt;/li&gt;
&lt;li&gt;功能点：获取客户端ip和所在地址；统计用户访问次数；以及收集浏览器相关信息。&lt;/li&gt;
&lt;li&gt;目的：实现功能很少，主要是把项目基础架构搭建起来，方便后续扩展。&lt;/li&gt;
&lt;li&gt;项目地址：&lt;a href=&quot;https://github.com/Jervis2049/koa2-mongodb-demo&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/Jervis2049/koa2-mongodb-demo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;目录结构&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├─app.js  //入口文件&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─views   //ejs模板&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─static  //静态资源&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─services //操作数据库的方法&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─routers //路由&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─models  //定义接口字段&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─db      //mongodb 配置&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─package.json //依赖文件&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="https://jervis2049.gitee.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://jervis2049.gitee.io/2020/12/15/miniprogram-canvas-icon-base64/"/>
    <id>https://jervis2049.gitee.io/2020/12/15/miniprogram-canvas-icon-base64/</id>
    <published>2020-12-15T09:59:10.427Z</published>
    <updated>2021-06-08T01:52:33.019Z</updated>
    
    <content type="html"><![CDATA[<hr><p>title: 微信小程序canvas绘制圆角base64图片<br>date: 2019-08-17 11:43:00</p><h2 id="tags-微信"><a href="#tags-微信" class="headerlink" title="tags: 微信"></a>tags: 微信</h2><blockquote><p>接口返回base64格式小程序二维码，以往的做法是需要再调一个接口去拿到jpg/png格式的图片。如果没有这个接口呢，是不是也可以？然而小程序canvas并不支持直接使用base64绘制，好在小程序的文件系统提供了方法，可以把base64经过进一步处理转成本地图片。</p></blockquote><h4 id="获取base64格式图片"><a href="#获取base64格式图片" class="headerlink" title="获取base64格式图片"></a>获取base64格式图片</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">getXcxQrcode() &#123;</span><br><span class="line">wx.request(&#123;</span><br><span class="line">url: app.globalData.globalUrl + <span class="string">"/get_wx_code"</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">token: app.globalData.weixin_token,</span><br><span class="line">scene: app.globalData.page_key,</span><br><span class="line">page: <span class="string">"pages/index/index"</span></span><br><span class="line">&#125;,</span><br><span class="line">success: <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (data.data.success) &#123;</span><br><span class="line"><span class="keyword">this</span>.base64src(data.data)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="base64格式图片转换成本地图片"><a href="#base64格式图片转换成本地图片" class="headerlink" title="base64格式图片转换成本地图片"></a>base64格式图片转换成本地图片</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">base64src(base64data) &#123;</span><br><span class="line"><span class="keyword">const</span> filePath = <span class="string">`<span class="subst">$&#123;wx.env.USER_DATA_PATH&#125;</span>/tmpbase64.png`</span>;</span><br><span class="line"><span class="keyword">const</span> buffer = wx.base64ToArrayBuffer(base64data.buffer);</span><br><span class="line"><span class="keyword">let</span> that = <span class="keyword">this</span>;</span><br><span class="line">fsm.writeFile(&#123;</span><br><span class="line">  filePath,</span><br><span class="line">  data: buffer,</span><br><span class="line">  encoding: <span class="string">'binary'</span>,</span><br><span class="line">  success() &#123;</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      qrcodeUrl: filePath  <span class="comment">// 得到http://usr/tmpbase64.png</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  fail() &#123;</span><br><span class="line">    reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'ERROR_BASE64SRC_WRITE'</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="使用获得的本地图片绘制圆角二维码"><a href="#使用获得的本地图片绘制圆角二维码" class="headerlink" title="使用获得的本地图片绘制圆角二维码"></a>使用获得的本地图片绘制圆角二维码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> qrW = <span class="number">150</span>; <span class="comment">//绘制的二维码宽度</span></span><br><span class="line"><span class="keyword">var</span> qrH = <span class="number">150</span>; <span class="comment">//绘制的二维码高度</span></span><br><span class="line"><span class="keyword">var</span> qr_x = <span class="number">540</span>; <span class="comment">//绘制的二维码在画布上的位置</span></span><br><span class="line"><span class="keyword">var</span> qr_y = <span class="number">960</span>; <span class="comment">//绘制的二维码在画布上的位置</span></span><br><span class="line">ctx.save();</span><br><span class="line"></span><br><span class="line">ctx.beginPath(); <span class="comment">//开始绘制</span></span><br><span class="line"><span class="comment">//先画个圆   前两个参数确定了圆心 （x,y） 坐标  第三个参数是圆的半径  四参数是绘图方向  默认是false，即顺时针</span></span><br><span class="line">ctx.arc(qrW / <span class="number">2</span> + qr_x, qrH / <span class="number">2</span> + qr_y, qrW / <span class="number">2</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">ctx.clip(); <span class="comment">//画好了圆 剪切  原始画布中剪切任意形状和尺寸。一旦剪切了某个区域，则所有之后的绘图都会被限制在被剪切的区域内 这也是我们要save上下文的原因</span></span><br><span class="line">ctx.drawImage(<span class="keyword">this</span>.data.qrcodeUrl, qr_x, qr_y, qrW, qrH);</span><br><span class="line">ctx.draw()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;title: 微信小程序canvas绘制圆角base64图片&lt;br&gt;date: 2019-08-17 11:43:00&lt;/p&gt;
&lt;h2 id=&quot;tags-微信&quot;&gt;&lt;a href=&quot;#tags-微信&quot; class=&quot;headerlink&quot; title=&quot;tags: 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>bat脚本+puppeteer自动化部署gitee pages</title>
    <link href="https://jervis2049.gitee.io/2020/12/14/gitee-auto-publish/"/>
    <id>https://jervis2049.gitee.io/2020/12/14/gitee-auto-publish/</id>
    <published>2020-12-14T06:16:02.000Z</published>
    <updated>2021-03-13T04:54:35.323Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>最初博客使用hexo搭建之后，部署到了github pages。然后使用<code>AppVeyor</code>可以做到自动化，每次只需要push到github就会触发构建，自动部署，非常方便。无奈国内访问速度不尽人意，后来又把博客迁到<code>Netlify</code>，这个的配置更简单，效果是一样的，push就完事了。但是访问速度也很慢，所以考虑把它迁到国内的服务器，于是便选择了gitee。访问速度这个解决了，但是问题又来了，部署到gitee pages，不能做到一键发布。网上搜了一圈好像没找到像github那样可以通过CI工具自动化部署的方案，push到gitee后，不仅不会自动构建，免费版的还需要手动地点一下“更新”的按钮，才能最终发布。</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="bat脚本"><a href="#bat脚本" class="headerlink" title="bat脚本"></a>bat脚本</h3><p>编写一个bat脚本（Windows系统），把所有的操作都写在里面，只需要双击执行它就会自动完成。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">@echo off </span><br><span class="line"></span><br><span class="line">echo building...</span><br><span class="line">@call hexo g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@echo =============================================================================================</span><br><span class="line">@echo pushing to gitee</span><br><span class="line">@echo =============================================================================================</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m "Update automatically by running a batch file."</span><br><span class="line">git push</span><br><span class="line"></span><br><span class="line">@echo =============================================================================================</span><br><span class="line">@echo deploying</span><br><span class="line">@echo =============================================================================================</span><br><span class="line">node deploy-local.js</span><br><span class="line"></span><br><span class="line">pause</span><br></pre></td></tr></table></figure></p><h3 id="puppeteer"><a href="#puppeteer" class="headerlink" title="puppeteer"></a>puppeteer</h3><blockquote><p>简介：Puppeteer是来自谷歌Chrome团队的一个项目，它使我们能够以编程的方式，通过调用Puppeteer API，控制一个Chrome(或任何其他基于Chrome DevTools协议的浏览器)浏览器，并执行常见的操作，就像在使用真实的浏览器中一样。简单地说，它是一个方便有用的工具，可以在headless模式或headful模式下自动化测试和爬取web页面。</p></blockquote><p>前面提及到成功push到gitee之后，还需要手动地触发一个页面的“更新”按钮，才能最终发布。这里使用<code>puppeteer</code>来帮我们自动完成。这个操作对应bat脚本里面的<code>node deploy-local.js</code>。</p><p>deploy-local.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> puppeteer = <span class="built_in">require</span>(<span class="string">"puppeteer"</span>);</span><br><span class="line">(<span class="keyword">async</span> () =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> browser = <span class="keyword">await</span> puppeteer.launch(&#123; <span class="attr">headless</span>: <span class="literal">false</span> &#125;);</span><br><span class="line">    <span class="keyword">const</span> page = <span class="keyword">await</span> browser.newPage();</span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">"https://gitee.com/login"</span>);</span><br><span class="line">    <span class="comment">//username</span></span><br><span class="line">    <span class="keyword">await</span> page.type(<span class="string">"#user_login"</span>, <span class="string">"你的gitee账号"</span>, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;);</span><br><span class="line">    <span class="comment">//password</span></span><br><span class="line">    <span class="keyword">await</span> page.type(<span class="string">"#user_password"</span>, <span class="string">"你的gitee密码"</span>, &#123; <span class="attr">delay</span>: <span class="number">100</span> &#125;);</span><br><span class="line">    <span class="comment">//login btn</span></span><br><span class="line">    page.click(<span class="string">'input[sa_evt="loginButtonClick"]'</span>)</span><br><span class="line">    <span class="comment">//wait for the selector to appear in page</span></span><br><span class="line">    <span class="keyword">await</span> page.waitForSelector(<span class="string">'#users-dashboard'</span>)</span><br><span class="line">    <span class="comment">//go to the next page</span></span><br><span class="line">    <span class="keyword">await</span> page.goto(<span class="string">"你的gitee项目路径/pages"</span>);</span><br><span class="line"><span class="comment">//update btn</span></span><br><span class="line">    page.click(<span class="string">'.update_deploy'</span>)  </span><br><span class="line">    <span class="comment">//comfirm dialog</span></span><br><span class="line">    <span class="keyword">await</span> page.on(<span class="string">'dialog'</span>, <span class="keyword">async</span> dialog =&gt; &#123; </span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'ok'</span>)</span><br><span class="line">        dialog.accept();</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">await</span> page.waitForTimeout(<span class="number">2000</span>)</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> deploying = <span class="keyword">await</span> page.$x(<span class="string">'//*[@id="pages_deploying"]'</span>)</span><br><span class="line">            <span class="keyword">if</span> (deploying.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'update...'</span>)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'complete'</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    browser.close();</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;最初博客使用hexo搭建之后，部署到了github pages。然后使用&lt;code&gt;AppVeyor&lt;/code&gt;可以做到自动化，每次只需要push到github就会触发构建，自动部署，非常方便。无奈国内访问速度不尽人意，后来又把博客迁到&lt;code&gt;Netlify&lt;/code&gt;，这个的配置更简单，效果是一样的，push就完事了。但是访问速度也很慢，所以考虑把它迁到国内的服务器，于是便选择了gitee。访问速度这个解决了，但是问题又来了，部署到gitee pages，不能做到一键发布。网上搜了一圈好像没找到像github那样可以通过CI工具自动化部署的方案，push到gitee后，不仅不会自动构建，免费版的还需要手动地点一下“更新”的按钮，才能最终发布。&lt;/p&gt;
    
    </summary>
    
    
      <category term="其它" scheme="https://jervis2049.gitee.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>安装nginx-http-concat模块，实现自由合并静态资源文件</title>
    <link href="https://jervis2049.gitee.io/2020/12/05/nginx-http-concat/"/>
    <id>https://jervis2049.gitee.io/2020/12/05/nginx-http-concat/</id>
    <published>2020-12-05T08:32:12.000Z</published>
    <updated>2021-05-20T09:36:02.595Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p> nginx-http-concat模块可以实现静态资源的合并，假如你的CDN资源目录有以下这些文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├─js</span><br><span class="line">| ├─axios.min.js</span><br><span class="line">| ├─vue.min.js</span><br><span class="line">| ├─swiper.4.4.2.min.js</span><br><span class="line">| ├─swiper.5.4.5.min.js</span><br><span class="line">| ├─vue-router.min.js</span><br><span class="line">├─css</span><br><span class="line">|  ├─bootstrap.min.css</span><br><span class="line">|  ├─swiper.4.4.2.min.css</span><br><span class="line">|  └swiper.5.4.5.min.css</span><br></pre></td></tr></table></figure><p>那么你可以使用以下这种方式自由地组合使用它们。前面两个问号<code>??</code>，后面的每个文件用<code>,</code>连接，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https://cdn.com/css/??bootstrap.min.css,swiper.4.4.2.min.css</span><br><span class="line">https://cdn.com/css/??bootstrap.min.css,swiper.5.4.5.min.css</span><br><span class="line">https://cdn.com/js/??vue.min.js,vue-router.min.js,axios.min.js</span><br><span class="line">...</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 下载</span><br><span class="line">&gt; wget https://codeload.github.com/alibaba/nginx-http-concat/zip/master </span><br><span class="line"></span><br><span class="line"># 解压</span><br><span class="line">&gt; unzip master </span><br><span class="line"></span><br><span class="line"># 切换到nginx所在目录</span><br><span class="line">&gt; cd /usr/local/nginx/nginx-1.12.2</span><br><span class="line"> </span><br><span class="line"># 添加nginx-http-concat模块</span><br><span class="line">&gt; ./configure \</span><br><span class="line">    --prefix=/usr/local/nginx \</span><br><span class="line">    --without-http_rewrite_module \</span><br><span class="line">    --without-http_gzip_module \</span><br><span class="line">    --with-http_stub_status_module \</span><br><span class="line">    --add-module=/root/nginx-http-concat-master</span><br><span class="line"></span><br><span class="line"># 安装</span><br><span class="line">&gt; make &amp;&amp; make install</span><br><span class="line"></span><br><span class="line"># 查看ngixn版本及其编译参数，若输出的configure arguments内容有nginx-http-concat则说明成功了。</span><br><span class="line">&gt; /usr/local/nginx/sbin/nginx  -V</span><br></pre></td></tr></table></figure><h4 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h4><p>编辑nginx.conf，加入<code>nginx-http-concat</code>参数</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; cd /usr/local/nginx/conf</span><br><span class="line">&gt; vim nginx.conf</span><br></pre></td></tr></table></figure><p> <code>concat_max_files</code>表示可以合并的最大个数；<code>concat_unique</code>表示是否允许合并不同类型的文件，默认是<code>on</code>，不能合并不同类型的文件。</p> <figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> <span class="attribute">location</span> /css/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /home/demo/static/;</span><br><span class="line">    <span class="attribute">concat</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">concat_max_files</span> <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">concat_unique</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">concat_types</span> text/css;</span><br><span class="line">&#125;</span><br><span class="line"><span class="attribute">location</span> /js/ &#123;</span><br><span class="line">    <span class="attribute">root</span> /home/demo/static/;</span><br><span class="line">    <span class="attribute">concat</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">concat_max_files</span> <span class="number">10</span>;</span><br><span class="line">    <span class="attribute">concat_unique</span> <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">concat_types</span> application/javascript;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 配置完成重启nginx<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure></p><p>另外，这个目录可能不太好记，你可以给nginx创建一个软链接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/local/nginx/sbin/nginx /usr/local/sbin/</span><br></pre></td></tr></table></figure></p><p>这样就可以全局使用nginx命令了，例如:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx -v</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt; nginx-http-concat模块可以实现静态资源的合并，假如你的CDN资源目录有以下这些文件：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├─js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| ├─axios.min.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| ├─vue.min.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| ├─swiper.4.4.2.min.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| ├─swiper.5.4.5.min.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;| ├─vue-router.min.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├─css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  ├─bootstrap.min.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  ├─swiper.4.4.2.min.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;|  └swiper.5.4.5.min.css&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;那么你可以使用以下这种方式自由地组合使用它们。前面两个问号&lt;code&gt;??&lt;/code&gt;，后面的每个文件用&lt;code&gt;,&lt;/code&gt;连接，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;https://cdn.com/css/??bootstrap.min.css,swiper.4.4.2.min.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;https://cdn.com/css/??bootstrap.min.css,swiper.5.4.5.min.css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;https://cdn.com/js/??vue.min.js,vue-router.min.js,axios.min.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="linux" scheme="https://jervis2049.gitee.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>webpack之html-include-loader开发</title>
    <link href="https://jervis2049.gitee.io/2020/11/16/html-include-loader/"/>
    <id>https://jervis2049.gitee.io/2020/11/16/html-include-loader/</id>
    <published>2020-11-16T13:12:12.000Z</published>
    <updated>2020-12-02T02:36:43.258Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>用于我们官网静态网站。实现了html模块化复用，如header，footer。</p></blockquote><p>社区也有方案，比如<code>webpack-html-plugin</code>配合<code>html-loader</code>， <code>webpack-html-plugin</code>支持ejs模板语法，<code>html-loader</code>支持引用html模块，写法如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `html-loader!` 表示引用html-loader这个加载器来解析。</span></span><br><span class="line">&lt;%= <span class="built_in">require</span>(<span class="string">'html-loader!./components/header.html'</span>) %&gt;</span><br></pre></td></tr></table></figure><p>这里写得没问题，但是不能在webpack里再配置<code>html-loader</code>了，因为<code>html-loader</code>会把html内容都转成字符串输出，使得ejs语法失效了。另外一个个人觉得不好的地方，就是这个写法<code>&lt;%= require %&gt;</code>不太好看。相比而言还是传统写法直观，下面就来实现一下，改造成更贴近html的语法~</p><a id="more"></a><h4 id="项目目录"><a href="#项目目录" class="headerlink" title="项目目录"></a>项目目录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-html-include-loader</span><br><span class="line">├─package.json</span><br><span class="line">├─webpack.config.js</span><br><span class="line">├─src</span><br><span class="line">|  ├─index.html</span><br><span class="line">|  ├─components</span><br><span class="line">|  |    ├─footer.html</span><br><span class="line">|  |    └header.html</span><br><span class="line">|  ├─img</span><br><span class="line">|  |  ├─logo.png</span><br><span class="line">├─loaders</span><br><span class="line">|    └html-include-loader.js</span><br></pre></td></tr></table></figure><h4 id="html-include-loader-js"><a href="#html-include-loader-js" class="headerlink" title="html-include-loader.js"></a>html-include-loader.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// loaders/html-include-loader.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> callBack = <span class="keyword">this</span>.async();</span><br><span class="line">    <span class="comment">//匹配页面上的，如&lt;include src="components/header.html" /&gt;内容 ,获取html组件文件路径，e.g. include/header.html</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/&lt;include\s+src="([^"]+)"\s+\/\&gt;/gim</span>;</span><br><span class="line">    <span class="comment">//当前处理的模块所在的目录 e.g. index.html所在目录：html-include-loader/src/</span></span><br><span class="line">    <span class="keyword">let</span> filePath = <span class="keyword">this</span>.context; </span><br><span class="line">    <span class="comment">// debugger</span></span><br><span class="line">    content = content.replace(reg, (ret, includePath) =&gt; &#123;</span><br><span class="line">        <span class="comment">//e.g.  D://loader-plugin-study/src/components/header.html</span></span><br><span class="line">        <span class="keyword">let</span> includeHtmlPath = path.resolve(filePath, includePath)</span><br><span class="line"></span><br><span class="line">        <span class="comment">//依赖收集，webpack可以监测文件变动并刷新</span></span><br><span class="line">        <span class="keyword">this</span>.addDependency(includeHtmlPath);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> includeHtml = fs.readFileSync(includeHtmlPath, &#123; <span class="attr">encoding</span>: <span class="string">'utf-8'</span> &#125;)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> includeHtml</span><br><span class="line">    &#125;)</span><br><span class="line">    content = <span class="built_in">JSON</span>.stringify(content);</span><br><span class="line">    <span class="keyword">var</span> result = <span class="string">`module.exports = <span class="subst">$&#123;content&#125;</span>`</span>;</span><br><span class="line">    </span><br><span class="line">    callBack(<span class="literal">null</span>, result)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title="webpack.config.js"></a>webpack.config.js</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="params">env</span> =&gt;</span> (&#123;</span><br><span class="line">    entry: &#123;</span><br><span class="line">        index: <span class="string">"./src/js/index.js"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: path.resolve(__dirname, <span class="string">'./dist'</span>),</span><br><span class="line">        filename: <span class="string">'js/[name].js'</span>,</span><br><span class="line">        publicPath: env.production ? <span class="string">'https://cdn.com/'</span> : <span class="string">''</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line">        rules: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.(png|jpe?g|gif|svg)$/</span>,</span><br><span class="line">                exclude: [<span class="regexp">/node_modules/</span>],</span><br><span class="line">                use: &#123;</span><br><span class="line">                    loader: <span class="string">'url-loader'</span>,</span><br><span class="line">                    options: &#123;</span><br><span class="line">                        name: <span class="string">'[name].[ext]'</span>,</span><br><span class="line">                        outputPath: <span class="string">"img"</span>,</span><br><span class="line">                        limit: <span class="number">8192</span></span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">                exclude: [<span class="regexp">/include/</span>, /node_modules/],</span><br><span class="line">                use: [</span><br><span class="line">                    &#123;</span><br><span class="line">                        loader: <span class="string">'html-include-loader'</span></span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//本地开发的loader放在loaders目录下，这里的配置意思是如果在node_modules找不到相关模块，就会去loaders目录下找。</span></span><br><span class="line">    resolveLoader: &#123;</span><br><span class="line">        modules: [<span class="string">'node_modules'</span>, <span class="string">'./loaders/'</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// devtool: env.production ? 'nosources-source-map' : 'cheap-module-eval-source-map',</span></span><br><span class="line">    devServer: &#123;</span><br><span class="line">        port: <span class="number">9000</span>,</span><br><span class="line">        contentBase: <span class="string">'./dist'</span>,</span><br><span class="line">        hot: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">            title: <span class="string">'index'</span>,</span><br><span class="line">            template: <span class="string">'./src/index.html'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        env.production ? <span class="literal">null</span> : <span class="keyword">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class="line">    ].filter(<span class="function"><span class="params">i</span> =&gt;</span> i)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"html-inlude-loader"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"dev"</span>: <span class="string">"webpack-dev-server --env.development"</span>,</span><br><span class="line">    <span class="attr">"build"</span>: <span class="string">"webpack --env.production"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"file-loader"</span>: <span class="string">"^6.2.0"</span>,</span><br><span class="line">    <span class="attr">"html-webpack-plugin"</span>: <span class="string">"^4.5.0"</span>,</span><br><span class="line">    <span class="attr">"url-loader"</span>: <span class="string">"^4.1.1"</span>,</span><br><span class="line">    <span class="attr">"webpack"</span>: <span class="string">"^4.42.1"</span>,</span><br><span class="line">    <span class="attr">"webpack-cli"</span>: <span class="string">"^3.3.11"</span>,</span><br><span class="line">    <span class="attr">"webpack-dev-server"</span>: <span class="string">"^3.10.3"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">"components/header.html"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/logo.png"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">src</span>=<span class="string">"components/footer.html"</span> /&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;用于我们官网静态网站。实现了html模块化复用，如header，footer。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;社区也有方案，比如&lt;code&gt;webpack-html-plugin&lt;/code&gt;配合&lt;code&gt;html-loader&lt;/code&gt;， &lt;code&gt;webpack-html-plugin&lt;/code&gt;支持ejs模板语法，&lt;code&gt;html-loader&lt;/code&gt;支持引用html模块，写法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// `html-loader!` 表示引用html-loader这个加载器来解析。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;%= &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;html-loader!./components/header.html&#39;&lt;/span&gt;) %&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里写得没问题，但是不能在webpack里再配置&lt;code&gt;html-loader&lt;/code&gt;了，因为&lt;code&gt;html-loader&lt;/code&gt;会把html内容都转成字符串输出，使得ejs语法失效了。另外一个个人觉得不好的地方，就是这个写法&lt;code&gt;&amp;lt;%= require %&amp;gt;&lt;/code&gt;不太好看。相比而言还是传统写法直观，下面就来实现一下，改造成更贴近html的语法~&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://jervis2049.gitee.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>实现一个拷贝文件到指定目录的webpack插件</title>
    <link href="https://jervis2049.gitee.io/2020/05/10/webpack-copy-plugin/"/>
    <id>https://jervis2049.gitee.io/2020/05/10/webpack-copy-plugin/</id>
    <published>2020-05-10T14:19:03.000Z</published>
    <updated>2020-10-25T15:51:45.277Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近在写一个chrome扩展，里面有些js文件，并不需要打包到html里面。比如backgound.js,content.js。但又需要它们存在js目录下。所以需要额外的复制这些js文件到打包后的js文件夹下。</p><p>也看到有<code>copy-webpack-plugin</code>这样的现成插件可以使用。但自己还是尝试简易实现一下这个功能。基本思路就是在代码构建好之后（afterEmit钩子）进行读写文件操作。</p><a id="more"></a><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>utils.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;Promise&#125;</span> </span>promise </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.awaitTo = <span class="function">(<span class="params">promise</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> promise.then(<span class="function"><span class="params">res</span> =&gt;</span> [<span class="literal">null</span>, res]).catch(<span class="function"><span class="params">err</span> =&gt;</span> [err])</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: throw error</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> </span>error message </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">exports.error = <span class="function">(<span class="params">msg</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Error</span>(msg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>options.json<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"type"</span>: <span class="string">"object"</span>,</span><br><span class="line">  <span class="attr">"properties"</span>: &#123;</span><br><span class="line">    <span class="attr">"from"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span>,</span><br><span class="line">      <span class="attr">"minLength"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"to"</span>: &#123;</span><br><span class="line">      <span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"additionalProperties"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"required"</span>: [<span class="string">"from"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>webpack-copy-plugin.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">"path"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; promisify &#125; = <span class="built_in">require</span>(<span class="string">"util"</span>);</span><br><span class="line"><span class="keyword">const</span> stat = promisify(fs.stat);</span><br><span class="line"><span class="keyword">const</span> mkdir = promisify(fs.mkdir);</span><br><span class="line"><span class="keyword">const</span> readdir = promisify(fs.readdir);</span><br><span class="line"><span class="keyword">const</span> &#123; awaitTo, error &#125; = <span class="built_in">require</span>(<span class="string">'./utils'</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; validate &#125; = <span class="built_in">require</span>(<span class="string">'schema-utils'</span>);</span><br><span class="line"><span class="keyword">const</span> schema = <span class="built_in">require</span>(<span class="string">'./options.json'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* copy files from the source directory to the output directory</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">from</span></span> - from source directory path</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">to</span></span> - output directory path</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CopyFile</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">validate(schema, options, &#123;</span><br><span class="line">name: <span class="string">'Copy Plugin'</span>,</span><br><span class="line">baseDataPath: <span class="string">'options'</span>,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">this</span>.options = options;</span><br><span class="line">&#125;</span><br><span class="line">apply(compiler) &#123;</span><br><span class="line"><span class="keyword">let</span> <span class="keyword">from</span> = <span class="keyword">this</span>.options.from,</span><br><span class="line">to = <span class="keyword">this</span>.options.to || compiler.options.output.path;</span><br><span class="line"><span class="comment">//compiler钩子afterEmit ：生成资源到目录之后。</span></span><br><span class="line">compiler.hooks.afterEmit.tap(<span class="string">"CopyPlugin"</span>, compilation =&gt; &#123;</span><br><span class="line"><span class="comment">// console.log(Object.keys(compilation.assets))</span></span><br><span class="line"><span class="keyword">this</span>.copyHandle(<span class="keyword">from</span>, to)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> copyHandle(<span class="keyword">from</span>, to) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> err, stats;</span><br><span class="line"></span><br><span class="line">[err] = <span class="keyword">await</span> awaitTo(stat(<span class="keyword">from</span>));</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> error(<span class="string">'Error occurred while checking the source directory.'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[err, stats] = <span class="keyword">await</span> awaitTo(stat(to));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!stats) &#123;</span><br><span class="line"></span><br><span class="line">[err] = <span class="keyword">await</span> awaitTo(mkdir(to))</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> error(<span class="string">'Error occurred while making directories.'</span>)</span><br><span class="line"><span class="keyword">this</span>.copyHandle(<span class="keyword">from</span>, to)</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> dirList;</span><br><span class="line">[err, dirList] = <span class="keyword">await</span> awaitTo(readdir(<span class="keyword">from</span>));</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> error(<span class="string">'Error occurred while reading the source directory.'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dirList.length; i++) &#123;</span><br><span class="line"><span class="keyword">let</span> sourcePath = path.resolve(<span class="keyword">from</span>, dirList[i]),</span><br><span class="line">destPath = path.resolve(to, dirList[i]),</span><br><span class="line">readStream, writeStream, stats;</span><br><span class="line"></span><br><span class="line">[err, stats] = <span class="keyword">await</span> awaitTo(stat(sourcePath));</span><br><span class="line"><span class="keyword">if</span> (err) <span class="keyword">throw</span> error(<span class="string">'Error occurred while checking source subdirectory.'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (stats.isFile()) &#123;</span><br><span class="line"><span class="comment">// 创建读取流</span></span><br><span class="line">readStream = fs.createReadStream(sourcePath);</span><br><span class="line"><span class="comment">// 创建写入流</span></span><br><span class="line">writeStream = fs.createWriteStream(destPath);</span><br><span class="line"><span class="comment">// 通过管道来传输流</span></span><br><span class="line">readStream.pipe(writeStream);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (stats.isDirectory()) &#123;</span><br><span class="line"><span class="keyword">this</span>.copyHandle(sourcePath, destPath)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports = CopyFile</span><br></pre></td></tr></table></figure></p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CopyFile = <span class="built_in">require</span>(<span class="string">'../libs/webpack-copy-plugin'</span>)</span><br><span class="line"><span class="keyword">new</span> CopyFile(&#123;</span><br><span class="line"><span class="keyword">from</span>: path.resolve(__dirname, <span class="string">'../src/js/app/'</span>),</span><br><span class="line">to: path.resolve(__dirname, <span class="string">'../dist/js/'</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;最近在写一个chrome扩展，里面有些js文件，并不需要打包到html里面。比如backgound.js,content.js。但又需要它们存在js目录下。所以需要额外的复制这些js文件到打包后的js文件夹下。&lt;/p&gt;
&lt;p&gt;也看到有&lt;code&gt;copy-webpack-plugin&lt;/code&gt;这样的现成插件可以使用。但自己还是尝试简易实现一下这个功能。基本思路就是在代码构建好之后（afterEmit钩子）进行读写文件操作。&lt;/p&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://jervis2049.gitee.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>红包小程序小结</title>
    <link href="https://jervis2049.gitee.io/2019/12/28/redpacket-mini-program/"/>
    <id>https://jervis2049.gitee.io/2019/12/28/redpacket-mini-program/</id>
    <published>2019-12-28T07:48:15.000Z</published>
    <updated>2021-06-08T01:52:23.925Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近做了一个红包兑换小程序，遇到了一些问题这里做一下总结。</p></blockquote><p>1、需求：回流用户在游戏客户端获取到口令，然后在小程序这边输入口令兑换红包，成功之后钱会发到用户微信账户里。<br>2、流程：若未授权，显示授权按钮。点击授权登录，授权成功后获取到私密字段iv和encryptedData，调取登陆接口。用户输入口令，正确则跳转校验姓名和身份证的页面，校验通过就调取提现接口，成功则提示提现成功，同时显示生成分享图按钮。分享图由用户昵称，头像，二维码，提现金额等等组成。<br>3、框架：uniapp</p><a id="more"></a><h3 id="分享图的问题"><a href="#分享图的问题" class="headerlink" title="分享图的问题"></a>分享图的问题</h3><p>1、<code>measureText</code>获取宽度的时候，传入的参数如果是数字，则会返回0。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">let money = 10;  </span><br><span class="line">money = money.toString(); //必须转成字符串</span><br><span class="line">ctx.measureText(money).width;</span><br></pre></td></tr></table></figure></p><p>2、绘制图片的时候不要忘了先使用<code>getImageInfo</code>转成临时地址，再<code>drawImage</code>，如果不经过这步，虽然开发者工具上看到是正常的，但是真机是显示不了。<br>3、在本地开发者工具看到打印出来的头像URL，有时是<code>https://wx.qlogo.cn</code>这个域名，有时又变成了<code>https://thirdwx.qlogo.cn</code>，所以这两个都需要在后台配置downloadFile合法域名，避免绘制分享图的时候出现问题。</p><blockquote><p>为提供更稳定的接口服务，通过微信登录接口或者获取粉丝信息接口获取用户基本信息时，用户头像URL字段的域名将从<a href="http://wx.qlogo.cn变更为http://thirdwx.qlogo.cn。原域名将逐步失效，为保证服务稳定，请开发者重新调用接口，更新用户头像URL信息。————" target="_blank" rel="noopener">http://wx.qlogo.cn变更为http://thirdwx.qlogo.cn。原域名将逐步失效，为保证服务稳定，请开发者重新调用接口，更新用户头像URL信息。————</a> 摘自<a href="https://zhuanlan.zhihu.com/p/35501598" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35501598</a> </p></blockquote><p>4、最初背景图大概170KB，尺寸750*1334，最终绘制出来的分享图太大了。解决方法：</p><ul><li>把背景图片尽量再压缩，最终是60多KB。</li><li>调<code>canvasToTempFilePath</code>的时候，fileType默认是png，可以设置为jpg；quality范围是(0,1]，取个合适的值。<br>5、小程序里面的保存图片并不是长按保存的，需要点击按钮授权。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span>  <span class="attr">open-type</span>=<span class="string">"getUserInfo"</span>  @<span class="attr">getuserinfo</span>=<span class="string">"onGotUserInfo"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span>、</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">onGotUserInfo(e)&#123;</span><br><span class="line">uni.saveImageToPhotosAlbum(&#123;</span><br><span class="line">filePath: <span class="keyword">this</span>.tempPath,</span><br><span class="line">success(res) &#123;</span><br><span class="line">uni.showToast(&#123;</span><br><span class="line">  title: <span class="string">'保存成功'</span>,</span><br><span class="line">  icon: <span class="string">'success'</span>,</span><br><span class="line">  duration: <span class="number">1500</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br><span class="line">fail(err)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>如图：如果用户点击确定，就会正常保存图片到本地相册了。<br><img src="/img/articleimg/13.png" alt="image"><br>如果用户点击取消，不授权呢？那还能怎么样，点击再弹出原来的弹窗重新授权呗。很遗憾，这里并不能像授权登录弹窗一样点了取消之后，再次点击授权按钮还会唤起那个弹窗。解决方法：在<code>saveImageToPhotosAlbum</code>的fail回调函数里面操作，再次获取保存到相册权限。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (err.errMsg === <span class="string">"saveImageToPhotosAlbum:fail:auth denied"</span> || err.errMsg === <span class="string">"saveImageToPhotosAlbum:fail authorize no response"</span> || err.errMsg === <span class="string">"saveImageToPhotosAlbum:fail auth deny"</span>) &#123;</span><br><span class="line">  uni.showModal(&#123;</span><br><span class="line">title: <span class="string">'提示'</span>,</span><br><span class="line">content: <span class="string">'需要您授权保存相册'</span>,</span><br><span class="line">showCancel: <span class="literal">false</span>,</span><br><span class="line">success:<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">  uni.openSetting(&#123;</span><br><span class="line">success(settingdata) &#123;</span><br><span class="line">  <span class="keyword">if</span> (settingdata.authSetting[<span class="string">'scope.writePhotosAlbum'</span>]) &#123;</span><br><span class="line">uni.showModal(&#123;</span><br><span class="line">  title: <span class="string">'提示'</span>,</span><br><span class="line">  content: <span class="string">'获取权限成功,再次点击保存图片按钮即可保存'</span>,</span><br><span class="line">  showCancel: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">uni.showModal(&#123;</span><br><span class="line">  title: <span class="string">'提示'</span>,</span><br><span class="line">  content: <span class="string">'获取权限失败，将无法保存到相册哦~'</span>,</span><br><span class="line">  showCancel: <span class="literal">false</span>,</span><br><span class="line">&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">fail(failData) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"failData"</span>,failData)</span><br><span class="line">&#125;,</span><br><span class="line">complete(finishData) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"finishData"</span>, finishData)</span><br><span class="line">&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>点击取消按钮之后，会跳转到这里。打开设置里的“保存到相册”的开关即可。<br><img src="/img/articleimg/14.png" alt="image"></p><h3 id="关于wx-login-和-wx-getUserInfo的先后顺序"><a href="#关于wx-login-和-wx-getUserInfo的先后顺序" class="headerlink" title="关于wx.login 和 wx.getUserInfo的先后顺序"></a>关于wx.login 和 wx.getUserInfo的先后顺序</h3><p>如果先调用wx.getUserInfo，拿到私密数据iv和encryptData，然后调wx.login获取到临时登录凭证code，最后调我们的业务登录接口，传入iv，encryptData，code，发现有一定概率会解密失败。先调用wx.login再调用wx.getUserInfo就没问题。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">open-type</span>=<span class="string">"getUserInfo"</span> @<span class="attr">getuserinfo</span>=<span class="string">"getUserInfo"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">getUserInfo(e)&#123;</span><br><span class="line"><span class="comment">//不从e.detail这里拿encryptedData和iv</span></span><br><span class="line">wx.login(&#123;</span><br><span class="line">success:<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line"><span class="comment">//1、获取code</span></span><br><span class="line"><span class="comment">//2、调wx.getSetting()，wx.getUserInfo拿到encryptedData和iv</span></span><br><span class="line"><span class="comment">//3、调业务登录接口拿到session和openid</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最近做了一个红包兑换小程序，遇到了一些问题这里做一下总结。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;1、需求：回流用户在游戏客户端获取到口令，然后在小程序这边输入口令兑换红包，成功之后钱会发到用户微信账户里。&lt;br&gt;2、流程：若未授权，显示授权按钮。点击授权登录，授权成功后获取到私密字段iv和encryptedData，调取登陆接口。用户输入口令，正确则跳转校验姓名和身份证的页面，校验通过就调取提现接口，成功则提示提现成功，同时显示生成分享图按钮。分享图由用户昵称，头像，二维码，提现金额等等组成。&lt;br&gt;3、框架：uniapp&lt;/p&gt;
    
    </summary>
    
    
      <category term="微信" scheme="https://jervis2049.gitee.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>微信网页授权返回invalid code 40029</title>
    <link href="https://jervis2049.gitee.io/2019/12/26/wechat-web-authorization-40029/"/>
    <id>https://jervis2049.gitee.io/2019/12/26/wechat-web-authorization-40029/</id>
    <published>2019-12-26T04:48:15.000Z</published>
    <updated>2021-06-08T01:53:43.479Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>最近做的一个微信公众号H5，遇到的问题，这里记录一下~</p></blockquote><p>invalid code，无效的code。网上查了一遍，普遍认为是重定向的问题，授权的时候出现两次跳转。因为code是一次性的，所以后面报错了。防止多次重定向的解决方法是在授权地址后面加上connect_redirect=1参数，意为只触发一次请求，加上参数像如下链接：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https://open.weixin.qq.com/connect/oauth2/authorize?appid=APPID&amp;redirect_uri=REDIR</span><br><span class="line">ECT_URI&amp;response_type=code&amp;scope=SCOPE&amp;state=STATE&amp;connect_redirect=1#wechat_redirect</span><br></pre></td></tr></table></figure><p>这时查看后台日志只看到一次请求了，但是仍然没起作用。后来经过组里的“老司机”提醒，说有可能是前端填的appid和后端的不一致造成的。</p><p>果不其然，是配置的信息有误…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;最近做的一个微信公众号H5，遇到的问题，这里记录一下~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;invalid code，无效的code。网上查了一遍，普遍认为是重定向的问题，授权的时候出现两次跳转。因为code是一次性的，所以后面报错了。防止多
      
    
    </summary>
    
    
      <category term="微信" scheme="https://jervis2049.gitee.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>Chrome扩展开发如何调试？</title>
    <link href="https://jervis2049.gitee.io/2019/11/12/chrome-extension-debug/"/>
    <id>https://jervis2049.gitee.io/2019/11/12/chrome-extension-debug/</id>
    <published>2019-11-11T16:00:00.000Z</published>
    <updated>2021-03-16T02:17:05.464Z</updated>
    
    <content type="html"><![CDATA[<p>之前没用构建工具的时候，项目目录大概是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">├── css</span><br><span class="line">├── img</span><br><span class="line">├── js</span><br><span class="line">│   ├── content.js</span><br><span class="line">│   ├── background.js</span><br><span class="line">│   └── popup.js</span><br><span class="line">├── manifest.json</span><br><span class="line">└── popup.html</span><br></pre></td></tr></table></figure></p><p>打开<code>chrome://extensions/</code>，点击<code>加载已解压的扩展程序</code>，把这个项目目录导进去就可以了。但是不好的地方是改动之后不会热更新，而且代码组织不方便。初始阶段可以采用这样的做法，熟悉以后应该使用工程化的做法。</p><a id="more"></a><p>使用webpack后的项目目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">├─.babelrc</span><br><span class="line">├─.gitignore</span><br><span class="line">├─package.json</span><br><span class="line">├─README.md</span><br><span class="line">├─webpack.config.js</span><br><span class="line">├─src</span><br><span class="line">|  ├─background.html </span><br><span class="line">|  ├─content.html</span><br><span class="line">|  ├─manifest.json</span><br><span class="line">|  ├─popup.html  </span><br><span class="line">|  ├─utils</span><br><span class="line">|  ├─pages</span><br><span class="line">|  |   ├─popup</span><br><span class="line">|  ├─img</span><br><span class="line">|  ├─fonts</span><br><span class="line">|  ├─entry</span><br><span class="line">|  |   ├─background.js</span><br><span class="line">|  |   ├─content.js</span><br><span class="line">|  |   └─popup.js</span><br><span class="line">|  ├─config</span><br><span class="line">|  ├─components</span><br><span class="line">├─dll</span><br><span class="line">|  ├─vendors.js</span><br><span class="line">|  └vendors.manifest.json</span><br><span class="line">├─configs</span><br><span class="line">|    ├─utils.js</span><br><span class="line">|    ├─webpack.base.config.js</span><br><span class="line">|    ├─webpack.dev.config.js</span><br><span class="line">|    ├─webpack.dll.config.js</span><br><span class="line">|    └─webpack.prod.config.js</span><br></pre></td></tr></table></figure></p><p>从上面可以看到<code>entry</code>目录下有<code>popup.js</code>、<code>content.js</code>、<code>background.js</code>，而且src目录有3个html与它们一一对应。（其中只有popup.html是有用的，其它的两个html只是为了热更新content.js和background.js而存在）。这里为了动态生成webpack的<code>entry</code>配置。</p><p>摘取部分配置。</p><p><code>webpack.base.config.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getEntry</span>(<span class="params">globPath</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> files = glob.sync(globPath);</span><br><span class="line">    <span class="keyword">let</span> entries = &#123;&#125;,</span><br><span class="line">        entry, dirname, basename, pathname, extname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; files.length; i++) &#123;</span><br><span class="line">        entry = files[i];</span><br><span class="line">        dirname = path.dirname(entry);<span class="comment">//返回路径的所在的文件夹名称</span></span><br><span class="line">        extname = path.extname(entry);<span class="comment">//返回指定文件名的扩展名称</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * path.basename(p, [ext])</span></span><br><span class="line"><span class="comment">         * 返回指定的文件名，返回结果可排除[ext]后缀字符串</span></span><br><span class="line"><span class="comment">         * path.basename('/foo/bar/baz/asdf/quux.html', '.html')=&gt;quux</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        basename = path.basename(entry, extname);</span><br><span class="line">        pathname = path.join(dirname, basename);<span class="comment">//路径合并</span></span><br><span class="line">        entries[basename] = entry;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回map=&gt;&#123;fileName:fileUrl&#125;</span></span><br><span class="line">    <span class="keyword">return</span> entries;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取所有的入口文件</span></span><br><span class="line"><span class="keyword">let</span> jsEntries = getEntry(<span class="string">'./src/entry/*.js'</span>);</span><br><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line">    entry: jsEntries,</span><br><span class="line">    resolve: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">module</span>: &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: [</span><br><span class="line"></span><br><span class="line">    ],</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取所有html页面</span></span><br><span class="line"><span class="keyword">let</span> tplPages = <span class="built_in">Object</span>.keys(getEntry(<span class="string">'./src/*.html'</span>));</span><br><span class="line"></span><br><span class="line">tplPages.forEach(<span class="function">(<span class="params">pathname</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> conf = &#123;</span><br><span class="line">        filename: pathname + <span class="string">'.html'</span>,</span><br><span class="line">        template: <span class="string">'./src/'</span> + pathname + <span class="string">'.html'</span>,</span><br><span class="line">        chunks: [<span class="string">"vendors"</span>, pathname]</span><br><span class="line">    &#125;;</span><br><span class="line">    config.plugins.push(<span class="keyword">new</span> HtmlWebpackPlugin(conf));</span><br><span class="line">&#125;);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>到此目前为止，build可以生成我们想要的文件了。但是！只能是生产环境的build，因为dev模式下打包通常是存在内存中，并没有产出实际的文件的，那这样怎么加载项目调试呢？难不成我每修改一下就build一次生产环境的，生成最终打包的文件，然后再打开<code>chrome://extensions/</code>导入预览。这样显然不友好，经查阅文档，找到了webpack-dev-server一个配置项，设置writeToDisk为true即可，意为写入硬盘，产出实体文件。</p><p><code>webpack.dev.config.js</code>如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpackMerge = <span class="built_in">require</span>(<span class="string">"webpack-merge"</span>);</span><br><span class="line"><span class="keyword">const</span> baseConfig = <span class="built_in">require</span>(<span class="string">"./webpack.base.config"</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>);</span><br><span class="line"><span class="keyword">const</span> CopyWebpackPlugin = <span class="built_in">require</span>(<span class="string">'copy-webpack-plugin'</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">"./utils"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> config = webpackMerge.smart(baseConfig, &#123;</span><br><span class="line">    output: &#123;</span><br><span class="line">path: resolve(<span class="string">'debug'</span>),</span><br><span class="line">filename: <span class="string">'js/[name].js'</span></span><br><span class="line">&#125;,</span><br><span class="line">    plugins: [</span><br><span class="line">        <span class="keyword">new</span> CopyWebpackPlugin([&#123;</span><br><span class="line"><span class="keyword">from</span>: resolve(<span class="string">'src/img/'</span>),</span><br><span class="line">to: resolve(<span class="string">'debug/img/'</span>)</span><br><span class="line">&#125;,&#123;</span><br><span class="line"><span class="keyword">from</span>: resolve(<span class="string">'src/manifest.json'</span>),</span><br><span class="line">to: resolve(<span class="string">'debug/manifest.json'</span>)</span><br><span class="line">&#125;]),</span><br><span class="line">    ],</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        writeToDisk: <span class="literal">true</span>,</span><br><span class="line">        port: <span class="number">9000</span>, </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">config.plugins.push(</span><br><span class="line">    <span class="keyword">new</span> webpack.HotModuleReplacementPlugin()</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = config;</span><br></pre></td></tr></table></figure></p><p>这样<code>npm run dev</code>的时候就可以生成<code>debug</code>目录了。每次修改文件，也会重新build，生成最新的。</p><p>此外还有个问题，dev模式打包的js文件里面含有eval，chrome认为这样是不安全的，eval的使用会存在XSS的风险。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught EvalError: Refused to evaluate a string as JavaScript because &apos;unsafe-eval&apos; is not an allowed source of script in the following Content Security Policy directive: &quot;script-src &apos;self&apos; blob: filesystem:&quot;.</span><br></pre></td></tr></table></figure></p><p>解决方法是在<code>manifest.json</code>加上一个配置，以暂时放松eval策略，production环境打包的时候再去掉就好了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"content_security_policy"</span>: <span class="string">"script-src 'self' 'unsafe-eval'; object-src'self'"</span></span><br></pre></td></tr></table></figure><p>写个plugin，修改manifest.json，生成新的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// configs/new-manifest-plugin.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * prodution环境打包，重新生成manifest.json。新的manifest.json去除了content_security_policy字段。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Manifest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">constructor</span>() &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    apply(compiler) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> pluginName = <span class="keyword">this</span>.constructor.name;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//emit钩子表示生成资源到 output 目录之前。</span></span><br><span class="line">        compiler.hooks.emit.tapAsync(pluginName, (compilation, cb) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> manifest = <span class="built_in">require</span>(<span class="string">"../src/manifest.json"</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (manifest.content_security_policy) &#123;</span><br><span class="line">                <span class="keyword">delete</span> manifest.content_security_policy</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">let</span> newManifest = <span class="built_in">JSON</span>.stringify(manifest);</span><br><span class="line"></span><br><span class="line">            compilation.assets[<span class="string">"manifest.json"</span>] = &#123;</span><br><span class="line">                source: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// fileContent 即可以代表文本文件的字符串，也可以是代表二进制文件的buffer</span></span><br><span class="line">                    <span class="keyword">return</span> newManifest;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 返回文件大小</span></span><br><span class="line">                size: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> newManifest.length</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 执行回调，让 webpack 继续执行</span></span><br><span class="line">            cb();</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Manifest</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前没用构建工具的时候，项目目录大概是这样的：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;├── css&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── img&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── content.js		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   ├── background.js		&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;│   └── popup.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;├── manifest.json&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;└── popup.html&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;打开&lt;code&gt;chrome://extensions/&lt;/code&gt;，点击&lt;code&gt;加载已解压的扩展程序&lt;/code&gt;，把这个项目目录导进去就可以了。但是不好的地方是改动之后不会热更新，而且代码组织不方便。初始阶段可以采用这样的做法，熟悉以后应该使用工程化的做法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="chrome" scheme="https://jervis2049.gitee.io/tags/chrome/"/>
    
  </entry>
  
  <entry>
    <title>编写一个webpack loader，用于获取指定目录下的图片，返回图片URL数组</title>
    <link href="https://jervis2049.gitee.io/2019/10/16/imgurl-loader/"/>
    <id>https://jervis2049.gitee.io/2019/10/16/imgurl-loader/</id>
    <published>2019-10-16T06:12:12.000Z</published>
    <updated>2021-02-19T07:05:10.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>经常遇到这么一个问题。h5项目需要做图片资源预加载的情况，我们往往需要手动的拿到一个个图片地址存在数组里面，然后再对其遍历做预加载处理，比如这样：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imgList = [<span class="string">'http://domain.com/img/1.jpg'</span>,<span class="string">'http://domain.com/img/2.jpg'</span>,<span class="string">'http://domain.com/img/3.jpg'</span>,...];</span><br></pre></td></tr></table></figure></p><p>本着能偷懒就偷懒的心态，我们可以编写一个webpack loader来处理，然后给我们返回以上所述那样一个数组。</p><p>预期在页面上这样调用，获取项目目录下的img文件夹的图片，给返回一个URL数组。注意，这里的<code>__getPath</code>并不是一个方法，只是把它写得像一个方法而已，而且js里面也没有像函数那样声明它，实际上它是在loader里面做了转换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> imgList = __getPath(<span class="string">'img'</span>);</span><br></pre></td></tr></table></figure><a id="more"></a><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>代码量很少，其实原理也比较简单，使用正则匹配<code>__getPath(&#39;img&#39;)</code>获得图片所在的文件夹名称，然后拿到图片的相对路径，require，再将其拼接字符返回，如：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">require</span>(<span class="string">"img/1.jpg"</span>),<span class="built_in">require</span>(<span class="string">"img/2.jpg"</span>),<span class="built_in">require</span>(<span class="string">"img/3.jpg"</span>),...]</span><br></pre></td></tr></table></figure></p><p>最终return的content会被执行，然后就返回了一个图片URL数组。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>)</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="keyword">const</span> glob = <span class="built_in">require</span>(<span class="string">'glob'</span>);</span><br><span class="line"><span class="keyword">const</span> loaderUtils = <span class="built_in">require</span>(<span class="string">'loader-utils'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params">content</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> options = loaderUtils.getOptions(<span class="keyword">this</span>) || &#123;&#125;; </span><br><span class="line">    <span class="keyword">if</span>(options.noCache)<span class="keyword">this</span>.cacheable(<span class="literal">false</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">let</span> fileReg = <span class="regexp">/__getPath\(([^\)]+)\)/gim</span>;</span><br><span class="line">    <span class="comment">//自定义文件 context|| 从webpack 4开始，原先的this.options.context被改进为this.rootContext</span></span><br><span class="line">    <span class="keyword">let</span> rootPath = options.context || <span class="keyword">this</span>.rootContext || (<span class="keyword">this</span>.options &amp;&amp; <span class="keyword">this</span>.options.context);</span><br><span class="line">    <span class="keyword">let</span> srcPath = path.join(rootPath, <span class="string">"/src"</span>);</span><br><span class="line">    <span class="keyword">let</span> filepath = <span class="keyword">this</span>.context; <span class="comment">////当前处理文件所在的目录</span></span><br><span class="line">    content = content.replace(fileReg, (ret, src) =&gt; &#123;</span><br><span class="line">        <span class="keyword">let</span> folderName = src.replace(<span class="regexp">/'|"/g</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">let</span> resList = glob.sync(path.join(srcPath, folderName) + <span class="string">"/*"</span>);</span><br><span class="line">        <span class="keyword">let</span> result = <span class="string">'['</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; resList.length; i++) &#123;</span><br><span class="line">            <span class="keyword">let</span> respath = path.relative(filepath, resList[i]).replace(<span class="regexp">/\\/g</span>, <span class="string">"/"</span>)</span><br><span class="line">            result += <span class="string">"require('"</span> + respath + <span class="string">"')"</span> + <span class="string">","</span></span><br><span class="line">        &#125;</span><br><span class="line">        result = result.substr(<span class="number">0</span>,result.length<span class="number">-1</span>) + <span class="string">"]"</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">       </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> content;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h2><p>我将其命名为<code>imgurl-loader</code>发布到npm上了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev imgurl-loader</span><br></pre></td></tr></table></figure></p><h3 id="webpack配置"><a href="#webpack配置" class="headerlink" title="webpack配置"></a>webpack配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line"> &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>, </span><br><span class="line">        include:<span class="regexp">/src/</span>,</span><br><span class="line">use: [&#123;</span><br><span class="line">          loader:<span class="string">'imgurl-loader'</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//图片处理</span></span><br><span class="line">&#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|jpeg|gif|svg)$/</span>,</span><br><span class="line">        use: [&#123;</span><br><span class="line">            loader: <span class="string">'file-loader'</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">                outputPath: <span class="string">'img'</span>,</span><br><span class="line">                name: <span class="string">'[name]_[contenthash:8].[ext]'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p><strong>Demo:</strong> <a href="https://github.com/Jervis2049/imgurl-loader/tree/demo" target="_blank" rel="noopener">https://github.com/Jervis2049/imgurl-loader/tree/demo</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;经常遇到这么一个问题。h5项目需要做图片资源预加载的情况，我们往往需要手动的拿到一个个图片地址存在数组里面，然后再对其遍历做预加载处理，比如这样：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; imgList = [&lt;span class=&quot;string&quot;&gt;&#39;http://domain.com/img/1.jpg&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;http://domain.com/img/2.jpg&#39;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&#39;http://domain.com/img/3.jpg&#39;&lt;/span&gt;,...];&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;本着能偷懒就偷懒的心态，我们可以编写一个webpack loader来处理，然后给我们返回以上所述那样一个数组。&lt;/p&gt;
&lt;p&gt;预期在页面上这样调用，获取项目目录下的img文件夹的图片，给返回一个URL数组。注意，这里的&lt;code&gt;__getPath&lt;/code&gt;并不是一个方法，只是把它写得像一个方法而已，而且js里面也没有像函数那样声明它，实际上它是在loader里面做了转换。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; imgList = __getPath(&lt;span class=&quot;string&quot;&gt;&#39;img&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://jervis2049.gitee.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Webpack中拆分bundle，加快构建速度，提高性能</title>
    <link href="https://jervis2049.gitee.io/2019/09/02/webpack-chunks/"/>
    <id>https://jervis2049.gitee.io/2019/09/02/webpack-chunks/</id>
    <published>2019-09-02T03:36:22.000Z</published>
    <updated>2021-03-03T04:17:09.491Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><blockquote><p>使用webpack打包项目，通常会把所有js文件打包成一个bundle，如果项目很大，这个bundle也将会很大，这样不仅导致开发过程中，webpack编译慢，而且页面引入一个体积很大的js文件也不好。所以我们要想办法把一些第三方库抽离出来，剩余的业务逻辑代码再打包成一个js文件。以下介绍三种方式。</p></blockquote><a id="more"></a><h4 id="CDN方式"><a href="#CDN方式" class="headerlink" title="CDN方式"></a>CDN方式</h4><p>使用CDN方式引用第三方js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//cdn.domain/vue/2.5.13/vue.min.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script src="/</span><span class="regexp">/cdn.domain/</span>vue/<span class="number">2.5</span><span class="number">.13</span>/vue-router.min.js<span class="string">"&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>externals配置要引用的库，剩余的再另外打包成一个js文件。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">externals: &#123;</span><br><span class="line"><span class="string">'vue'</span>: <span class="string">'Vue'</span>,</span><br><span class="line"><span class="string">'vue-router'</span>: <span class="string">'VueRouter'</span>,</span><br><span class="line">&#125;,</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h4 id="splitChunks"><a href="#splitChunks" class="headerlink" title="splitChunks"></a>splitChunks</h4><p>也可以这样，把<code>vue.min.js</code>,<code>vue-router.min.js</code>,<code>axios.min.js</code>等等下载下来放在lib文件夹，最终打包成一个<code>vendor.js</code>。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加lib第三方库的打包</span></span><br><span class="line">optimization: &#123;</span><br><span class="line">minimize: <span class="literal">false</span>,</span><br><span class="line">runtimeChunk : <span class="literal">false</span>,</span><br><span class="line">splitChunks: &#123;</span><br><span class="line">cacheGroups: &#123;</span><br><span class="line">vendor: &#123;</span><br><span class="line">name : <span class="string">'vendor'</span>,</span><br><span class="line">test: path.resolve(<span class="string">"src/js/lib/"</span>),</span><br><span class="line">chunks: <span class="string">'all'</span>,</span><br><span class="line">minChunks: <span class="number">1</span>,</span><br><span class="line">enforce: <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p><h4 id="DllPlugin"><a href="#DllPlugin" class="headerlink" title="DllPlugin"></a>DllPlugin</h4><p>webpack.dll.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">'webpack'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.resolve(__dirname, <span class="string">'../'</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    vendors: [<span class="string">'react'</span>, <span class="string">'react-dom'</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">'[name].js'</span>,</span><br><span class="line">    path: resolve(<span class="string">'dll'</span>),</span><br><span class="line">    library: <span class="string">'[name]'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      path: resolve(<span class="string">'dll/[name].manifest.json'</span>),</span><br><span class="line">      name: <span class="string">'[name]'</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在package.json的scripts添加：<code>&quot;dll&quot;: &quot;webpack --config configs/webpack.dll.config.js&quot;</code>，然后执行<code>npm run dll</code>生成<br>dll目录，目录下有<code>vendors.js</code>和<code>vendors.manifest.json</code>。<code>vendors.js</code>就是合并打包第三方js的总的文件，<code>vendors.manifest.json</code>，这个文件是用于让 DllReferencePlugin 能够映射到相应的依赖上。</p><p>webpack.prod.config.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">plugins: [</span><br><span class="line"><span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">manifest: <span class="built_in">require</span>(<span class="string">'../dll/vendors.manifest.json'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">],</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;使用webpack打包项目，通常会把所有js文件打包成一个bundle，如果项目很大，这个bundle也将会很大，这样不仅导致开发过程中，webpack编译慢，而且页面引入一个体积很大的js文件也不好。所以我们要想办法把一些第三方库抽离出来，剩余的业务逻辑代码再打包成一个js文件。以下介绍三种方式。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="webpack" scheme="https://jervis2049.gitee.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>网站微信分享总结</title>
    <link href="https://jervis2049.gitee.io/2019/06/08/web-wechat-share/"/>
    <id>https://jervis2049.gitee.io/2019/06/08/web-wechat-share/</id>
    <published>2019-06-08T10:42:58.000Z</published>
    <updated>2021-06-08T01:50:36.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>目的是微信分享做到自定义图片，描述，标题。做到这样需要在公众号后台做一些配置，把网站和公众号关联起来。</p><h3 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h3><ul><li>公众号运营方提供公众号的AppID和AppSecret，以及那个需要放到服务器目录下的txt文件；<br><img src="/img/articleimg/6.png" alt="image"></li><li>提供需要配置的JS接口安全域名给公众号运营方，假设是: <a href="http://www.test.com（网站域名）" target="_blank" rel="noopener">www.test.com（网站域名）</a> 和 weixin.test.com（接口）</li><li>提供AppID和AppSecret给后端，后端接口返回signature等等信息；</li><li>提供前面所说的txt上传到weixin.test.com的根目录；</li><li>问后端要服务器IP白名单，我们提供给公众号运营方配置；  </li><li>前端页面引入JS-SDK，调用相应的API。</li></ul><h3 id="开发调试"><a href="#开发调试" class="headerlink" title="开发调试"></a>开发调试</h3><p>在微信开发者工具-公众号网页开发调试，如有报错，会有log提示。</p><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><p>JS-SDK说明文档。常见报错，看该文附录五。<br><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html" target="_blank" rel="noopener">https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/JS-SDK.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;目的是微信分享做到自定义图片，描述，标题。做到这样需要在公众号后台做一些配置，把网站和公众号关联起来。&lt;/p&gt;
&lt;h3 id=&quot;流程&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="微信" scheme="https://jervis2049.gitee.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>移动端视频转序列图片播放</title>
    <link href="https://jervis2049.gitee.io/2019/05/08/video-to-img/"/>
    <id>https://jervis2049.gitee.io/2019/05/08/video-to-img/</id>
    <published>2019-05-08T08:32:19.000Z</published>
    <updated>2020-12-07T03:24:35.855Z</updated>
    
    <content type="html"><![CDATA[<h3 id="页面使用视频嵌入的问题："><a href="#页面使用视频嵌入的问题：" class="headerlink" title="页面使用视频嵌入的问题："></a>页面使用视频嵌入的问题：</h3><p>1.微信支持视频内嵌播放,支持自动播放<br>2.IOS 10以下safari不支持视频内嵌及自动播放<br>3.IOS 10及以上safari支持视频内嵌及无音轨视频的自动播放<br>4.安卓下原生浏览器播放控制栏规范不统一，部分机型无法隐藏，内嵌播放及自动播放规范不统一<br>5.安卓和IOS的第三方浏览器会弹出小窗口播放视频，无法内嵌显示</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>将视频转化成序列帧，用JS控制img的src进行切换，视觉上达到和播放视频一样的效果。这种方式也是有局限性的，视频不能太大，建议控制在5s以内，本次项目就是5s的视频导出的base64 js达到了3.5M，勉强可以用。所以3s视频转base64序列帧，大小感觉最适中。视频太大的话，导出的图片就会多，那么存放base64的JS文件也将会很大，所以这个是要根据具体情况斟酌的。</p><a id="more"></a><h4 id="1、使用-Premiere-将视频转化成序列帧"><a href="#1、使用-Premiere-将视频转化成序列帧" class="headerlink" title="1、使用 Premiere 将视频转化成序列帧"></a>1、使用 Premiere 将视频转化成序列帧</h4><p><img src="https://s1.imagehub.cc/images/2020/11/03/1562588258.png" alt="image"></p><p>选择合适的尺寸，宽750会比较大，可选600，640。质量选择50左右。输出格式选择JPEG，帧速率选择12-15。5s的视频，选择12帧速率，导出了60张：<br><img src="https://s1.imagehub.cc/images/2020/09/29/1257f8502c8fcd77bf.png" alt="image"></p><h4 id="2、使用node将导出的图片转化成base64"><a href="#2、使用node将导出的图片转化成base64" class="headerlink" title="2、使用node将导出的图片转化成base64"></a>2、使用node将导出的图片转化成base64</h4><p>将导出的图片转化成base64，然后以数组的形式存放在一个JS文件，最终生成这个JS文件。</p><p>目录结构<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|--img</span><br><span class="line">|--index.js</span><br></pre></td></tr></table></figure></p><p>index.js<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> toBase64 = <span class="function"><span class="params">foldername</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> fileNmaeArr = fs.readdirSync(foldername);</span><br><span class="line"><span class="keyword">let</span> strBase64 = <span class="string">""</span>;</span><br><span class="line">fileNmaeArr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">parseInt</span>(a) - <span class="built_in">parseInt</span>(b)</span><br><span class="line">&#125;)</span><br><span class="line">fileNmaeArr.forEach(<span class="function">(<span class="params">item, index, array</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">let</span> path = foldername + <span class="string">'/'</span> + item;</span><br><span class="line"><span class="keyword">let</span> str = fs.readFileSync(path, &#123;</span><br><span class="line">encoding: <span class="string">'base64'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> (index &lt; array.length - <span class="number">1</span>) &#123;</span><br><span class="line">strBase64 += <span class="string">'\"'</span> + str + <span class="string">'\"'</span> + <span class="string">","</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">strBase64 += <span class="string">'\"'</span> + str + <span class="string">'\"'</span>;</span><br><span class="line"><span class="keyword">let</span> imgs = <span class="string">`var imgList = [<span class="subst">$&#123;strBase64&#125;</span>]`</span>;</span><br><span class="line">fs.writeFileSync(<span class="string">'img.js'</span>, imgs);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"导出成功！"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">toBase64(<span class="string">'img'</span>)</span><br></pre></td></tr></table></figure></p><p>执行<code>node index.js</code> 导出<code>img.js</code></p><h3 id="3、JS切换img标签的src，播放序列帧"><a href="#3、JS切换img标签的src，播放序列帧" class="headerlink" title="3、JS切换img标签的src，播放序列帧"></a>3、JS切换img标签的src，播放序列帧</h3><p><code>ImgSequence</code>调用前，页面要先预加载img.js。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">id</span>=<span class="string">"imgVideo"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> requestAnimFrame = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (</span><br><span class="line"><span class="built_in">window</span>.requestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.webkitRequestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.mozRequestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.oRequestAnimationFrame ||</span><br><span class="line"><span class="built_in">window</span>.msRequestAnimationFrame ||</span><br><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">callback</span>) </span>&#123;</span><br><span class="line"><span class="built_in">window</span>.setTimeout(callback, <span class="number">1000</span> / <span class="number">60</span>)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ImgSequence = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> _class = <span class="function"><span class="keyword">function</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.el = opt.el;</span><br><span class="line"><span class="keyword">this</span>.imgArr = opt.imgArr || [];</span><br><span class="line"><span class="keyword">this</span>.isOver = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">this</span>.nowPic = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.oldPic = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">this</span>.startPic = opt.startPic || <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>.speed = opt.speed || <span class="number">12</span>;</span><br><span class="line"><span class="keyword">this</span>.isLoop = opt.isLoop === <span class="literal">false</span> ? <span class="literal">false</span> : <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>.complete = opt.complete;</span><br><span class="line"><span class="keyword">this</span>.playing = opt.playing;</span><br><span class="line">&#125;</span><br><span class="line">_class.prototype = &#123;</span><br><span class="line">loop: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isOver) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.ntime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line"><span class="keyword">this</span>.diftime = <span class="keyword">this</span>.ntime - <span class="keyword">this</span>.stime;</span><br><span class="line"><span class="keyword">this</span>.nowPic = <span class="built_in">Math</span>.floor(<span class="keyword">this</span>.diftime * <span class="keyword">this</span>.speed * <span class="number">0.001</span>) + <span class="keyword">this</span>.startPic;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.playing == <span class="string">"function"</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.playing(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.nowPic &gt;= <span class="keyword">this</span>.imgArr.length) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="keyword">this</span>.complete == <span class="string">"function"</span>) &#123;</span><br><span class="line"><span class="keyword">this</span>.complete(<span class="keyword">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.startPic = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.isLoop) &#123;</span><br><span class="line"><span class="keyword">this</span>.play();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">requestAnimFrame(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">this</span>.loop();</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.nowPic == <span class="keyword">this</span>.oldPic) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.el.setAttribute(<span class="string">"src"</span>, <span class="string">"data:image/jpg;base64,"</span> + <span class="keyword">this</span>.imgArr[<span class="keyword">this</span>.nowPic]);</span><br><span class="line"><span class="keyword">this</span>.oldPic = <span class="keyword">this</span>.nowPic;</span><br><span class="line">&#125;,</span><br><span class="line">play: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.oldPic = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">this</span>.stime = +<span class="keyword">new</span> <span class="built_in">Date</span>;</span><br><span class="line"><span class="keyword">this</span>.el.setAttribute(<span class="string">"src"</span>, <span class="string">"data:image/jpg;base64,"</span> + <span class="keyword">this</span>.imgArr[<span class="keyword">this</span>.startPic]);</span><br><span class="line"><span class="keyword">this</span>.loop();</span><br><span class="line">&#125;,</span><br><span class="line">onplay: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.isOver = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">this</span>.play()</span><br><span class="line">&#125;,</span><br><span class="line">stop: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.isOver = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">this</span>.startPic = <span class="keyword">this</span>.nowPic;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">init: <span class="function"><span class="keyword">function</span>(<span class="params">opt</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> _class(opt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">var</span> imgSequence = ImgSequence.init(&#123;</span><br><span class="line">el: <span class="built_in">document</span>.getElementById(<span class="string">'imgVideo'</span>), <span class="comment">//必填</span></span><br><span class="line">imgArr: [], <span class="comment">//必填，img数组</span></span><br><span class="line">speed: <span class="number">12</span>, <span class="comment">//可选，每秒播放多少帧，默认12 ，小于imgList的长度</span></span><br><span class="line">isLoop: <span class="literal">true</span>, <span class="comment">//可选，是否循环播放，默认true</span></span><br><span class="line">startPic: <span class="number">0</span>, <span class="comment">//可选，从第几帧开始播放，默认0（也就是第1帧）</span></span><br><span class="line">playing: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; <span class="comment">//播放中</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">complete: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123; <span class="comment">//播放完成</span></span><br><span class="line"></span><br><span class="line">&#125;,</span><br><span class="line">&#125;)</span><br><span class="line">imgSequence.play() <span class="comment">//播放</span></span><br><span class="line">imgSequence.stop() <span class="comment">//暂停</span></span><br><span class="line">imgSequence.onplay() <span class="comment">//继续播放</span></span><br></pre></td></tr></table></figure><h3 id="线上案例"><a href="#线上案例" class="headerlink" title="线上案例"></a>线上案例</h3><p><a href="http://mc.163.com/m/brain/" target="_blank" rel="noopener">http://mc.163.com/m/brain/</a></p><h2 id="2019-06-28更新"><a href="#2019-06-28更新" class="headerlink" title="2019/06/28更新"></a>2019/06/28更新</h2><blockquote><p>最近的一个H5也有类似的需求，需求方给来了一个20M的视频，经过一些处理之后，转base64，JS文件达到了6M。这还是太大了。因为script标签是异步下载，同步解析的，这么大的JS堵在前面，页面会停留空白时间很久，所以肯定不能这样做了。最终的解决方法是，视频经过优化后变为了8M,然后对这个视频输出序列图。图片不再转base64了，也不用生成那个JS文件。直接对图片帧进行预加载，这时页面起码可以做一个loading百分比提示，而不至于显示空白。预加载完成之后仍然用上面封装好的组件进行播放。</p></blockquote><h3 id="线上案例-1"><a href="#线上案例-1" class="headerlink" title="线上案例"></a>线上案例</h3><p><a href="http://sky.163.com/m/2019/workshop/" target="_blank" rel="noopener">http://sky.163.com/m/2019/workshop/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;页面使用视频嵌入的问题：&quot;&gt;&lt;a href=&quot;#页面使用视频嵌入的问题：&quot; class=&quot;headerlink&quot; title=&quot;页面使用视频嵌入的问题：&quot;&gt;&lt;/a&gt;页面使用视频嵌入的问题：&lt;/h3&gt;&lt;p&gt;1.微信支持视频内嵌播放,支持自动播放&lt;br&gt;2.IOS 10以下safari不支持视频内嵌及自动播放&lt;br&gt;3.IOS 10及以上safari支持视频内嵌及无音轨视频的自动播放&lt;br&gt;4.安卓下原生浏览器播放控制栏规范不统一，部分机型无法隐藏，内嵌播放及自动播放规范不统一&lt;br&gt;5.安卓和IOS的第三方浏览器会弹出小窗口播放视频，无法内嵌显示&lt;/p&gt;
&lt;h3 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;p&gt;将视频转化成序列帧，用JS控制img的src进行切换，视觉上达到和播放视频一样的效果。这种方式也是有局限性的，视频不能太大，建议控制在5s以内，本次项目就是5s的视频导出的base64 js达到了3.5M，勉强可以用。所以3s视频转base64序列帧，大小感觉最适中。视频太大的话，导出的图片就会多，那么存放base64的JS文件也将会很大，所以这个是要根据具体情况斟酌的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="其它" scheme="https://jervis2049.gitee.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>最近项目在iOS系统出现的兼容性问题</title>
    <link href="https://jervis2049.gitee.io/2019/02/16/ios-compatible-problem/"/>
    <id>https://jervis2049.gitee.io/2019/02/16/ios-compatible-problem/</id>
    <published>2019-02-16T09:16:02.000Z</published>
    <updated>2020-12-07T03:23:09.617Z</updated>
    
    <content type="html"><![CDATA[<h3 id="勾选字符-✔-在iOS的设备上显示黑色"><a href="#勾选字符-✔-在iOS的设备上显示黑色" class="headerlink" title="勾选字符 ✔ 在iOS的设备上显示黑色"></a>勾选字符 ✔ 在iOS的设备上显示黑色</h3><p><img src="https://s1.imagehub.cc/images/2020/09/30/9.jpg" alt="image"><br><a id="more"></a><br>写在after伪类content里面的这个勾选字符 ✔ 在iOS的设备上显示黑色，设置color无效，原样式是这样写的<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"\2714"</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>iphone手机上显示的是黑色。</p><p>在stackoverflow看到两个帖子有提到这个，可以参考一下。<br><a target="_blank" href="https://stackoverflow.com/questions/39514315/safari-on-iphone-is-unable-to-style-the-color-of-pseudo-element-after-with-cont">Safari on iPhone is unable to style the color of pseudo element :after with content \2714 but it works for \2713</a><br><a target="_blank" href="https://stackoverflow.com/questions/32639694/ios-9-removed-the-possibility-to-change-certain-symbol-colors-using-css">iOS 9 removed the possibility to change certain symbol colors using CSS</a></p><p>我最后采取的是这个方法:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">span</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">"\2714\fe0e"</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="input的问题"><a href="#input的问题" class="headerlink" title="input的问题"></a>input的问题</h3><h4 id="1、input不能获得焦点"><a href="#1、input不能获得焦点" class="headerlink" title="1、input不能获得焦点"></a>1、input不能获得焦点</h4><p>在iOS上只有用户主动触发的focus事件才会起效，而不能直接通过focus()唤出键盘。所以一般会需要有一个按钮给用户主动触发。所以可以给一个元素绑定一个事件，然后在事件回调里面执行input的focus方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> inputEle = <span class="built_in">document</span>.querySelector(<span class="string">'.input'</span>);</span><br><span class="line"><span class="keyword">let</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'.btn'</span>);</span><br><span class="line">btn.addEventListener(<span class="string">'click'</span>,()=&gt;&#123;</span><br><span class="line">  btn.focus()</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure></p><p>如果是用vue写的话，如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"container"</span>&gt;</span><br><span class="line">    &lt;div @click=<span class="string">"showInput"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="input-box" :class="focus?'show':''"&gt;</span></span><br><span class="line"><span class="regexp">      &lt;input v-focus ref="input" class="input-text" placeholder="我来评论..." type="text" /</span>&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">  &lt;/</span>div&gt;</span><br><span class="line">&lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">&lt;style&gt;</span></span><br><span class="line"><span class="regexp">  .input-box&#123;</span></span><br><span class="line"><span class="regexp">    position: fixed;</span></span><br><span class="line"><span class="regexp">    bottom:0;</span></span><br><span class="line"><span class="regexp">    width:100%;</span></span><br><span class="line"><span class="regexp">    height:.80rem;</span></span><br><span class="line"><span class="regexp">    transform: translateY(100%);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">  .input-box.show&#123;</span></span><br><span class="line"><span class="regexp">    transform: translateY(0);</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    data () &#123;</span><br><span class="line">      focus : <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    directives: &#123;</span><br><span class="line">      focus: &#123;</span><br><span class="line">        inserted(el) &#123;</span><br><span class="line">          el.focus()</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      showInput()&#123;</span><br><span class="line">        <span class="keyword">this</span>.focus = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.$refs.input.focus()         </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、收起软键盘的时候，页面没有滑下来"><a href="#2、收起软键盘的时候，页面没有滑下来" class="headerlink" title="2、收起软键盘的时候，页面没有滑下来"></a>2、收起软键盘的时候，页面没有滑下来</h4><p>由于聚焦input的时候，出现软键盘，所以页面会被顶上去，当收起软键盘的时候，页面按理应该会滑下来，可是没有。<br>解决：失去焦点的时候 window.scroll(0,0)<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-focus</span> <span class="attr">ref</span>=<span class="string">"input"</span> @<span class="attr">blur</span>=<span class="string">"onBlur"</span> <span class="attr">class</span>=<span class="string">"input-text"</span> <span class="attr">placeholder</span>=<span class="string">"我来评论..."</span> <span class="attr">type</span>=<span class="string">"text"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">onBlur()&#123;</span><br><span class="line">  window.scroll(0,0) </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;勾选字符-✔-在iOS的设备上显示黑色&quot;&gt;&lt;a href=&quot;#勾选字符-✔-在iOS的设备上显示黑色&quot; class=&quot;headerlink&quot; title=&quot;勾选字符 ✔ 在iOS的设备上显示黑色&quot;&gt;&lt;/a&gt;勾选字符 ✔ 在iOS的设备上显示黑色&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://s1.imagehub.cc/images/2020/09/30/9.jpg&quot; alt=&quot;image&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="其它" scheme="https://jervis2049.gitee.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>vim命令</title>
    <link href="https://jervis2049.gitee.io/2018/12/23/vim-cmd/"/>
    <id>https://jervis2049.gitee.io/2018/12/23/vim-cmd/</id>
    <published>2018-12-23T09:53:09.000Z</published>
    <updated>2020-12-20T14:22:30.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>总会忘记，这里记录一下</p></blockquote><p>vim主要有3种模式：命令模式（Command mode），插入模式（Insert mode）和底行模式（Last line mode）。</p><h3 id="编辑与保存"><a href="#编辑与保存" class="headerlink" title="编辑与保存"></a>编辑与保存</h3><p>比如，<code>vim nginx.conf</code>打开nginx.conf文件，默认就是进入命令模式的。这时候键盘敲下<code>i</code>就切换到插入模式了，就可以编辑内容了，编辑过程中想撤销，怎么办？可以输<code>Esc</code>回到命令模式，然后按<code>u</code>撤销上一步的操作,<code>Ctrl+R</code>则可以恢复上一步被撤销的操作。</p><p>在命令模式输入<code>:</code>(英文冒号)可以进入底行模式。常用命令有：</p><ul><li>:q  不保存,直接退出 (文件未做任何编辑)</li><li>:q! 不保存，并强制退出 (文件已编辑，但不想保存)</li><li>:w  保存编辑后的文件内容，但不退出。这个命令的作用是把内存缓冲区中的数据写到启动vim时指定的文件中。</li><li>w! 强制保存，不退出 （强制写文件，即强制覆盖原有文件。）</li><li>:wq 保存，并退出</li><li>wq! 强制保存，并退出</li></ul><p>PS：<code>w</code>是<code>write</code>(write to disk)的缩写，<code>q</code>是<code>quit</code>的缩写</p><p>最后按ESC键可退出底行模式，回到命令模式。</p><h3 id="复制与粘贴"><a href="#复制与粘贴" class="headerlink" title="复制与粘贴"></a>复制与粘贴</h3><p>在命令模式下输入:set number，可以展示文本行号。</p><p>1、在命令模式输入<code>V</code>（大写），进入按行选择模式，通过键盘上下方向键，选择复制的行文本。<br>2、在命令模式输入<code>v</code>（小写），进入按字符选择模式，通过键盘上下左右方向键，选择复制的文本。<br>3、在命令行模式下按下组合键<code>Ctrl+V</code>，进入到按块选择模式。通过键盘上下左右方向键，选择复制的区域块。</p><p>选中之后，按<code>y</code>复制，按<code>p</code>粘贴。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;总会忘记，这里记录一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;vim主要有3种模式：命令模式（Command mode），插入模式（Insert mode）和底行模式（Last line mode）。&lt;/p&gt;
&lt;h3 id=&quot;编辑与保存&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="linux" scheme="https://jervis2049.gitee.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>vue下拉菜单组件（含搜索）</title>
    <link href="https://jervis2049.gitee.io/2018/11/24/vue-select/"/>
    <id>https://jervis2049.gitee.io/2018/11/24/vue-select/</id>
    <published>2018-11-24T08:40:25.000Z</published>
    <updated>2020-12-07T03:24:28.919Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前也写过这个小组件，最近遇到select下加搜索的需求，所以稍微完善一下。</p></blockquote><p>效果图：</p><p><img src="/img/articleimg/3.png" alt="image"><img src="/img/articleimg/4.png" alt="image"><img src="/img/articleimg/5.png" alt="image"></p><a id="more"></a><h4 id="子组件-dropdown-vue"><a href="#子组件-dropdown-vue" class="headerlink" title="子组件 dropdown.vue"></a>子组件 dropdown.vue</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"vue-dropdown default-theme"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"cur-name"</span> :<span class="class"><span class="keyword">class</span></span>=<span class="string">"isShow ? 'show':''"</span> @click=<span class="string">"isShow =! isShow"</span>&gt;&#123;&#123;itemlist.cur.name&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="list-and-search" :class="isShow?'on':''"&gt;</span></span><br><span class="line"><span class="regexp">    &lt;div class="search-module clearfix" v-show="isNeedSearch"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;input class="search-text" </span></span><br><span class="line"><span class="regexp">            @keyup='search($event)' :placeholder="placeholder" /</span>&gt;</span><br><span class="line">        &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;ul class="list-module"&gt;</span></span><br><span class="line"><span class="regexp">            &lt;li v-for ="(item,index) in datalist" @click="selectToggle(item)" </span></span><br><span class="line"><span class="regexp">            :key="index"&gt;</span></span><br><span class="line"><span class="regexp">                &lt;span class="list-item-text"&gt;&#123;&#123;item.name&#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">            &lt;<span class="regexp">/li&gt;</span></span><br><span class="line"><span class="regexp">        &lt;/u</span>l&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"tip-nodata"</span> v-show=<span class="string">"isNeedSearch &amp;&amp; datalist.length == 0"</span>&gt;&#123;&#123;nodatatext&#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                datalist:[],</span><br><span class="line">                isShow:<span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        props:&#123;</span><br><span class="line">            <span class="string">'itemlist'</span>:<span class="built_in">Object</span>,<span class="comment">//父组件传来的数据</span></span><br><span class="line">            <span class="string">'placeholder'</span>:&#123;</span><br><span class="line">            type:<span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">'搜索'</span> <span class="comment">//input placeholder的默认值</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'isNeedSearch'</span>:&#123; <span class="comment">//是否需要搜索框</span></span><br><span class="line">            type:<span class="built_in">Boolean</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">'nodatatext'</span>:&#123; </span><br><span class="line">            type:<span class="built_in">String</span>,</span><br><span class="line">            <span class="keyword">default</span>: <span class="string">'未找到结果'</span> <span class="comment">//没有搜索到时的文本提示</span></span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;,</span><br><span class="line">        created()&#123;</span><br><span class="line">        <span class="keyword">this</span>.datalist = <span class="keyword">this</span>.itemlist.data;</span><br><span class="line">            <span class="comment">//点击组件以外的地方，收起</span></span><br><span class="line">            <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>, (e) =&gt; &#123;</span><br><span class="line">              <span class="keyword">if</span> (!<span class="keyword">this</span>.$el.contains(e.target))&#123;</span><br><span class="line">                  <span class="keyword">this</span>.isShow = <span class="literal">false</span>; </span><br><span class="line">              &#125;</span><br><span class="line">            &#125;, <span class="literal">false</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        methods:&#123;</span><br><span class="line">            selectToggle(data)&#123;</span><br><span class="line">            <span class="keyword">this</span>.itemlist.cur.name = data.name;</span><br><span class="line">            <span class="keyword">this</span>.isShow = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">this</span>.$emit(<span class="string">'item-click'</span>,data);</span><br><span class="line">            &#125;,</span><br><span class="line">            search(e)&#123;</span><br><span class="line">                <span class="keyword">let</span> searchvalue = e.currentTarget.value;</span><br><span class="line">                <span class="keyword">this</span>.datalist = <span class="keyword">this</span>.itemlist.data.filter(<span class="function">(<span class="params">item,index,arr</span>)=&gt;</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> item.name.indexOf(searchvalue) != <span class="number">-1</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;style lang="less" scoped&gt;</span></span><br><span class="line"><span class="regexp">    .vue-dropdown.default-theme &#123;</span></span><br><span class="line"><span class="regexp">        width: 200px;</span></span><br><span class="line"><span class="regexp">        height: 34px;</span></span><br><span class="line"><span class="regexp">        z-index:10;</span></span><br><span class="line"><span class="regexp">        border-radius:3px; </span></span><br><span class="line"><span class="regexp">        border: 1px solid #ccc;</span></span><br><span class="line"><span class="regexp">        cursor: pointer;</span></span><br><span class="line"><span class="regexp">        -webkit-user-select:none; </span></span><br><span class="line"><span class="regexp">        user-select:none;</span></span><br><span class="line"><span class="regexp">        margin-left:20px;</span></span><br><span class="line"><span class="regexp">        position: relative;</span></span><br><span class="line"><span class="regexp">        .list-and-search&#123;</span></span><br><span class="line"><span class="regexp">            top: 32px;</span></span><br><span class="line"><span class="regexp">            left: -1px;</span></span><br><span class="line"><span class="regexp">            width: 100%;</span></span><br><span class="line"><span class="regexp">            position: absolute;</span></span><br><span class="line"><span class="regexp">            background: #fff;</span></span><br><span class="line"><span class="regexp">            border: 1px solid #ccc;</span></span><br><span class="line"><span class="regexp">            display: none;</span></span><br><span class="line"><span class="regexp">            &amp;.on&#123;</span></span><br><span class="line"><span class="regexp">                display: block;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .cur-name&#123;</span></span><br><span class="line"><span class="regexp">            height: 32px;</span></span><br><span class="line"><span class="regexp">            line-height: 31px;</span></span><br><span class="line"><span class="regexp">            text-indent: 10px;</span></span><br><span class="line"><span class="regexp">            position: relative;</span></span><br><span class="line"><span class="regexp">            color: #777;</span></span><br><span class="line"><span class="regexp">            &amp;:after&#123;</span></span><br><span class="line"><span class="regexp">                position: absolute;</span></span><br><span class="line"><span class="regexp">                right: 9px;</span></span><br><span class="line"><span class="regexp">                top: 13px;</span></span><br><span class="line"><span class="regexp">                content: " ";</span></span><br><span class="line"><span class="regexp">                width: 0;</span></span><br><span class="line"><span class="regexp">                height: 0;</span></span><br><span class="line"><span class="regexp">                border-right: 6px solid transparent;</span></span><br><span class="line"><span class="regexp">                border-top: 6px solid #7b7b7b;</span></span><br><span class="line"><span class="regexp">                border-left: 6px solid transparent;</span></span><br><span class="line"><span class="regexp">                border-bottom: 6px solid transparent;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">            &amp;.show&#123;</span></span><br><span class="line"><span class="regexp">                &amp;:after&#123;</span></span><br><span class="line"><span class="regexp">                    right: 9px;</span></span><br><span class="line"><span class="regexp">                    top: 6px;</span></span><br><span class="line"><span class="regexp">                    border-right: 6px solid transparent;</span></span><br><span class="line"><span class="regexp">                    border-bottom: 6px solid #7b7b7b;</span></span><br><span class="line"><span class="regexp">                    border-left: 6px solid transparent;</span></span><br><span class="line"><span class="regexp">                    border-top: 6px solid transparent;</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .search-module &#123;</span></span><br><span class="line"><span class="regexp">            position: relative;</span></span><br><span class="line"><span class="regexp">            border-bottom: 1px solid #ccc;</span></span><br><span class="line"><span class="regexp">            .search-text &#123;</span></span><br><span class="line"><span class="regexp">                width: 100%;</span></span><br><span class="line"><span class="regexp">                height: 30px;</span></span><br><span class="line"><span class="regexp">                text-indent: 10px;</span></span><br><span class="line"><span class="regexp">                box-shadow: none;</span></span><br><span class="line"><span class="regexp">                outline: none;</span></span><br><span class="line"><span class="regexp">                border: none;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        input::-webkit-input-placeholder&#123;</span></span><br><span class="line"><span class="regexp">            font-size: 14px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .list-module &#123;</span></span><br><span class="line"><span class="regexp">            max-height: 200px;</span></span><br><span class="line"><span class="regexp">            overflow-y: auto;</span></span><br><span class="line"><span class="regexp">            li &#123;</span></span><br><span class="line"><span class="regexp">                &amp;._self-hide &#123;</span></span><br><span class="line"><span class="regexp">                    display: none;</span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">                margin-top: 0.4em;</span></span><br><span class="line"><span class="regexp">                padding: 0.4em;</span></span><br><span class="line"><span class="regexp">                &amp;:hover &#123;</span></span><br><span class="line"><span class="regexp">                    cursor:pointer;</span></span><br><span class="line"><span class="regexp">                    color: #fff;</span></span><br><span class="line"><span class="regexp">                    background: #00a0e9;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">                &#125;</span></span><br><span class="line"><span class="regexp">            &#125;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">        .tip-nodata &#123;</span></span><br><span class="line"><span class="regexp">            font-size: 14px;</span></span><br><span class="line"><span class="regexp">            padding: 10px 0;</span></span><br><span class="line"><span class="regexp">            text-indent: 10px;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>style&gt;</span><br></pre></td></tr></table></figure><h4 id="父组件调用"><a href="#父组件调用" class="headerlink" title="父组件调用"></a>父组件调用</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dropdown</span> @<span class="attr">item-click</span>=<span class="string">"dropDownClick"</span> <span class="attr">:isNeedSearch</span>=<span class="string">"true"</span> <span class="attr">:itemlist</span>=<span class="string">"itemlist"</span>&gt;</span><span class="tag">&lt;/<span class="name">dropdown</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Dropdown <span class="keyword">from</span> <span class="string">'@/components/dropdown.vue'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">       itemlist: &#123;</span><br><span class="line">        cur: &#123;</span><br><span class="line">          val: <span class="string">""</span>,</span><br><span class="line">          name: <span class="string">"所有产品"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        data: [&#123;</span><br><span class="line">          val: <span class="string">""</span>,</span><br><span class="line">          name: <span class="string">"所有产品"</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          val: <span class="number">1</span>,</span><br><span class="line">          name: <span class="string">"梦幻西游"</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          val: <span class="number">2</span>,</span><br><span class="line">          name: <span class="string">"梦幻无双"</span></span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          val: <span class="number">3</span>,</span><br><span class="line">          name: <span class="string">"大话西游"</span></span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">  Dropdown,</span><br><span class="line">  &#125;,</span><br><span class="line">  methods :&#123;</span><br><span class="line">  dropDownClick(e) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e.name, e.val)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认是不带搜索框，如果需要可以传这个<code>:isNeedSearch=&quot;true&quot;</code>。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;之前也写过这个小组件，最近遇到select下加搜索的需求，所以稍微完善一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/img/articleimg/3.png&quot; alt=&quot;image&quot;&gt;&lt;img src=&quot;/img/articleimg/4.png&quot; alt=&quot;image&quot;&gt;&lt;img src=&quot;/img/articleimg/5.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="其它" scheme="https://jervis2049.gitee.io/tags/%E5%85%B6%E5%AE%83/"/>
    
  </entry>
  
  <entry>
    <title>Chrome扩展之消息传递</title>
    <link href="https://jervis2049.gitee.io/2018/11/02/chrome-extension-message/"/>
    <id>https://jervis2049.gitee.io/2018/11/02/chrome-extension-message/</id>
    <published>2018-11-01T16:00:00.000Z</published>
    <updated>2021-03-08T14:16:00.975Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>需求：点击扩展程序图标弹出popup，在当前页面完全载入后（即window.onload时机），在popup上展示performance.timing的信息。</p></blockquote><h4 id="popup、background、content-scripts的概念简述"><a href="#popup、background、content-scripts的概念简述" class="headerlink" title="popup、background、content_scripts的概念简述"></a>popup、background、content_scripts的概念简述</h4><ul><li>popup就是点击扩展图标弹出的一个页面。</li><li>content_scripts是注入到web页面的js，可以设置多个。</li><li>background是一个会一直运行在浏览器后台的js，可以用于添加监听器等等。</li></ul><a id="more"></a><p>manifest.json相关配置<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="string">"page_action"</span>: &#123;</span><br><span class="line">    <span class="string">"default_icon"</span>: &#123;</span><br><span class="line">        <span class="string">"24"</span>: <span class="string">"img/icon-24.png"</span>,</span><br><span class="line">        <span class="string">"48"</span>: <span class="string">"img/icon-48.png"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"default_title"</span>: <span class="string">"XXX"</span>,</span><br><span class="line">    <span class="string">"default_popup"</span>: <span class="string">"popup.html"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"background"</span>: &#123;</span><br><span class="line">    <span class="string">"scripts"</span>: [</span><br><span class="line">        <span class="string">"js/background.js"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"content_scripts"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">"matches"</span>: [</span><br><span class="line">            <span class="string">"http://*/*"</span>,</span><br><span class="line">            <span class="string">"https://*/*"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"js"</span>: [</span><br><span class="line">            <span class="string">"js/content.js"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"run_at"</span>: <span class="string">"document_start"</span></span><br><span class="line">    &#125;</span><br><span class="line">],</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><h4 id="消息传递流程"><a href="#消息传递流程" class="headerlink" title="消息传递流程"></a>消息传递流程</h4><p>画了一个流程图（比较丑，别介意哈）<br><img src="/img/articleimg/1.jpg" alt="image"></p><h4 id="content-script注入到web"><a href="#content-script注入到web" class="headerlink" title="content_script注入到web"></a>content_script注入到web</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//window.onload之后获取到performance.timing，发送给background</span></span><br><span class="line"><span class="keyword">const</span> getPerformance = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">timing: performance.timing,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">chrome.runtime.sendMessage(getPerformance())</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"onload"</span>)</span><br><span class="line">&#125;, <span class="number">500</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="popup建立长连接（Long-lived-connections）"><a href="#popup建立长连接（Long-lived-connections）" class="headerlink" title="popup建立长连接（Long-lived connections）"></a>popup建立长连接（Long-lived connections）</h4><p>在popup可以发送消息给background，也可以监听来自background的消息<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建立连接</span></span><br><span class="line"><span class="keyword">let</span> port = chrome.runtime.connect(&#123; <span class="attr">name</span>: <span class="string">'popup_port'</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听来自background的message</span></span><br><span class="line">port.onMessage.addListener(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送tab id到background  </span></span><br><span class="line">chrome.tabs.query(&#123; <span class="attr">active</span>: <span class="literal">true</span>, <span class="attr">currentWindow</span>: <span class="literal">true</span> &#125;, tabs =&gt; &#123;</span><br><span class="line">    port.postMessage(&#123;</span><br><span class="line">        tabId: tabs[<span class="number">0</span>].id</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h4 id="background接收消息"><a href="#background接收消息" class="headerlink" title="background接收消息"></a>background接收消息</h4><p>background可以接收来自content的消息，也可以发送消息给popup<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//接收来自content的消息</span></span><br><span class="line">chrome.runtime.onMessage.addListener(<span class="function"><span class="keyword">function</span> (<span class="params">message, sender, sendResponse</span>) </span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"msg_from_content"</span>, message)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//监听在popup建立的连接，可以返回数据给popup</span></span><br><span class="line">chrome.runtime.onConnect.addListener(<span class="function"><span class="keyword">function</span> (<span class="params">port</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (port.name === <span class="string">'popup_port'</span>) &#123;</span><br><span class="line">port.onMessage.addListener(<span class="function"><span class="params">msg</span> =&gt;</span> &#123;</span><br><span class="line">port.postMessage(&#123;&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;需求：点击扩展程序图标弹出popup，在当前页面完全载入后（即window.onload时机），在popup上展示performance.timing的信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;popup、background、content-scripts的概念简述&quot;&gt;&lt;a href=&quot;#popup、background、content-scripts的概念简述&quot; class=&quot;headerlink&quot; title=&quot;popup、background、content_scripts的概念简述&quot;&gt;&lt;/a&gt;popup、background、content_scripts的概念简述&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;popup就是点击扩展图标弹出的一个页面。&lt;/li&gt;
&lt;li&gt;content_scripts是注入到web页面的js，可以设置多个。&lt;/li&gt;
&lt;li&gt;background是一个会一直运行在浏览器后台的js，可以用于添加监听器等等。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="chrome" scheme="https://jervis2049.gitee.io/tags/chrome/"/>
    
  </entry>
  
</feed>
